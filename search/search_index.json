{"config":{"indexing":"full","lang":["en","ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0423\u0432\u0430\u0436\u0430\u0435\u043c \u0432\u0441\u0435 \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. VKWave \u0437\u0434\u0435\u0441\u044c. \u0411\u043e\u0442 \u043d\u0435 \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0432\u0430\u0448\u0438\u043c \u043f\u0435\u0440\u0432\u044b\u043c \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u043c, \u0441\u043d\u0430\u0447\u0430\u043b\u0430 \u043d\u0430 \u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e\u043c \u0443\u0440\u043e\u0432\u043d\u0435 \u0438\u0437\u0443\u0447\u0438\u0442\u0435 \u044f\u0437\u044b\u043a \u0438 \u043f\u043e\u0434\u0435\u043b\u0430\u0439\u0442\u0435 \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u044b\u0435 \u043f\u0440\u043e\u0435\u043a\u0442\u044b VkWave \u00b6 English version VKWave - \u044d\u0442\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u043b\u0451\u0433\u043a\u0438\u0445 \u0432 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441 API \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. VKWave \u0432\u0434\u043e\u0445\u043d\u043e\u0432\u043b\u0435\u043d \u043c\u043d\u043e\u0433\u0438\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438, \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438: aiogram , vk.py \u0438 \u043c\u043d\u043e\u0433\u0438\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438. \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u0435\u0439\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: @KurimuzonAkuma \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u041f\u043e\u0447\u0435\u043c\u0443 VKWave? \u00b6 \u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u041f\u043e\u043b\u043d\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0439 \u0442\u0438\u043f\u043e\u0432 \u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430 \u00b6 \u0421 GitHub, \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0441\u0432\u0435\u0436\u0438\u043c\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438: pip install https://github.com/fscdev/vkwave/archive/master.zip \u0418\u043b\u0438 \u0441 PyPI (\u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f, \u0434\u0430\u0432\u043d\u043e \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u043b\u0430\u0441\u044c): pip install vkwave \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u00b6 VKWave - \u044d\u0442\u043e \u043d\u0435 \u0441\u0430\u043c\u0430\u044f \u0431\u044b\u0441\u0442\u0440\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u0438\u0437-\u0437\u0430 \u043d\u0430\u0448\u0435\u0439 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043b\u0451\u0433\u043a\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0434 \u0441\u0435\u0431\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u043e \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c\u0438 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0447\u0435\u043c \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c. \u041d\u043e \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u043d\u044b \u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0441\u0442\u0435\u0441\u043d\u044f\u0439\u0442\u0435\u0441\u044c \u0434\u0435\u043b\u0430\u0442\u044c Pull Request-\u044b \u0438 \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438. \u0421\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e \u00b6 VKWave - \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043c\u043e\u043b\u043e\u0434\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442. \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a API \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 \u0423\u0447\u0435\u0431\u043d\u0438\u043a\u0438 \u0434\u043b\u044f \u043b\u0451\u0433\u043a\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430 \u0414\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u00b6 \u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043b\u044f VKWave (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432, \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0449\u0435 vkwave.bots.addons.easy ), \u0442\u043e \u0432\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0442\u0430\u043a: vkwave-bots-really-easy . \u041e\u0431\u0449\u0438\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439: vkwave-<\u0447\u0430\u0441\u0442\u044c-vkwave>-<\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435-\u043f\u0440\u043e\u0435\u043a\u0442\u0430> .","title":"Home"},{"location":"#vkwave","text":"English version VKWave - \u044d\u0442\u043e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0438 \u043b\u0451\u0433\u043a\u0438\u0445 \u0432 \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u043e\u0432, \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0441 API \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. VKWave \u0432\u0434\u043e\u0445\u043d\u043e\u0432\u043b\u0435\u043d \u043c\u043d\u043e\u0433\u0438\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430\u043c\u0438, \u0432 \u0447\u0430\u0441\u0442\u043d\u043e\u0441\u0442\u0438: aiogram , vk.py \u0438 \u043c\u043d\u043e\u0433\u0438\u043c\u0438 \u0434\u0440\u0443\u0433\u0438\u043c\u0438. \u0422\u0435\u043a\u0443\u0449\u0438\u0439 \u043c\u0435\u0439\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u043f\u0440\u043e\u0435\u043a\u0442\u0430: @KurimuzonAkuma \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f \u041f\u0440\u0438\u043c\u0435\u0440\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f","title":"VkWave"},{"location":"#vkwave_1","text":"\u041c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u0430\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u044f \u041f\u043e\u043b\u043d\u0430\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u0430\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u0439 \u0442\u0438\u043f\u043e\u0432","title":"\u041f\u043e\u0447\u0435\u043c\u0443 VKWave?"},{"location":"#_1","text":"\u0421 GitHub, \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u0441\u0432\u0435\u0436\u0438\u043c\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u044f\u043c\u0438: pip install https://github.com/fscdev/vkwave/archive/master.zip \u0418\u043b\u0438 \u0441 PyPI (\u043d\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0443\u0435\u0442\u0441\u044f, \u0434\u0430\u0432\u043d\u043e \u043d\u0435 \u043e\u0431\u043d\u043e\u0432\u043b\u044f\u043b\u0430\u0441\u044c): pip install vkwave","title":"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430"},{"location":"#_2","text":"VKWave - \u044d\u0442\u043e \u043d\u0435 \u0441\u0430\u043c\u0430\u044f \u0431\u044b\u0441\u0442\u0440\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430, \u0438\u0437-\u0437\u0430 \u043d\u0430\u0448\u0435\u0439 \u0443\u0432\u0435\u0440\u0435\u043d\u043d\u043e\u0441\u0442\u0438 \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043b\u0451\u0433\u043a\u0430\u044f \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043f\u043e\u0434 \u0441\u0435\u0431\u044f, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u043e \u043f\u0440\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u043e \u0432\u0441\u0435\u0445 \u0437\u0430\u0434\u0430\u0447\u0430\u0445 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0431\u043e\u043b\u0435\u0435 \u0432\u0430\u0436\u043d\u044b\u043c\u0438 \u0445\u0430\u0440\u0430\u043a\u0442\u0435\u0440\u0438\u0441\u0442\u0438\u043a\u0430\u043c\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438, \u0447\u0435\u043c \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c. \u041d\u043e \u043c\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0437\u0430\u0438\u043d\u0442\u0435\u0440\u0435\u0441\u043e\u0432\u0430\u043d\u044b \u0432 \u0443\u043b\u0443\u0447\u0448\u0435\u043d\u0438\u0438 \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u044d\u0442\u043e\u043c\u0443 \u043d\u0435 \u0441\u0442\u0435\u0441\u043d\u044f\u0439\u0442\u0435\u0441\u044c \u0434\u0435\u043b\u0430\u0442\u044c Pull Request-\u044b \u0438 \u043e\u0431\u0441\u0443\u0436\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438.","title":"\u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c"},{"location":"#_3","text":"VKWave - \u044d\u0442\u043e \u043e\u0447\u0435\u043d\u044c \u043c\u043e\u043b\u043e\u0434\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442. \u041f\u0440\u043e\u0441\u0442\u0430\u044f \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430 \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430 \u043a API \u0422\u0435\u043b\u0435\u0433\u0440\u0430\u043c \u0447\u0430\u0442 \u0423\u0447\u0435\u0431\u043d\u0438\u043a\u0438 \u0434\u043b\u044f \u043b\u0451\u0433\u043a\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0442\u0430","title":"\u0421\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u043e"},{"location":"#_4","text":"\u0415\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u0434\u043b\u044f VKWave (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0431\u043e\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432, \u0434\u0430\u0436\u0435 \u043f\u0440\u043e\u0449\u0435 vkwave.bots.addons.easy ), \u0442\u043e \u0432\u0430\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u043d\u0430\u0437\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u043f\u0440\u043e\u0435\u043a\u0442 \u0442\u0430\u043a: vkwave-bots-really-easy . \u041e\u0431\u0449\u0438\u0439 \u043f\u0430\u0442\u0442\u0435\u0440\u043d \u0434\u043b\u044f \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0439: vkwave-<\u0447\u0430\u0441\u0442\u044c-vkwave>-<\u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435-\u043f\u0440\u043e\u0435\u043a\u0442\u0430> .","title":"\u0414\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f"},{"location":"api/api/","text":"API \u00b6 \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c 3 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API: API , APIOptions , APIOptionsRequestContext . API \u044d\u0442\u043e \u044f\u0434\u0440\u043e. \u041e\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b. from vkwave.api import API , Token , UserSyncSingleToken my_token = Token ( 'token' ) api = API ( tokens = UserSyncSingleToken ( my_token )) \u0412 APIOptions \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f tokens , clients , strategy \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0435\u0449\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u0447\u0435\u0440\u0435\u0437 api.default_api_options . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442, \u0442\u043e\u043a\u0435\u043d \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e api = API ( ... ) api . default_api_options . add_token ( tokens = [ ... ]) # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d \u041d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u044d\u0442\u0438\u043c \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442! api_session = API ( ... ) api = api_session . get_context () \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043f\u0438\u0448\u0435\u0442\u0435 \u044d\u0442\u043e - \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 APIOptionsRequestContext . \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 APIOptions . result = await api . status . get () print ( result . response . text ) API Handler \u00b6 \u0423 \u0432\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441. \u041a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 API, \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430, \u043d\u0435\u0443\u0436\u0435\u043b\u0438 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u0435\u0437\u0434\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 API? \u041d\u043e \u043d\u0435\u0442, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0430\u043c\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f: from vkwave.bots import SimpleLongPollBot , SimpleBotEvent bot = SimpleLongPollBot ( tokens = 'mytoken' , group_id =- 1 ) @bot . message_handler ( bot . command_filter ( 'getuser' )) async def get_user ( event : SimpleBotEvent ): api = event . api_ctx user_id = event . text . split ()[ 1 ] user_info = ( await api . users . get ( user_ids = user_id )) . response [ 0 ] return f '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435: { user_info } ' \u0427\u0435\u0440\u0435\u0437 \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u043f\u0446\u0438\u044f\u043c API \u0447\u0435\u0440\u0435\u0437 api.pi_options.","title":"API"},{"location":"api/api/#api","text":"\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c 3 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API: API , APIOptions , APIOptionsRequestContext . API \u044d\u0442\u043e \u044f\u0434\u0440\u043e. \u041e\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b. from vkwave.api import API , Token , UserSyncSingleToken my_token = Token ( 'token' ) api = API ( tokens = UserSyncSingleToken ( my_token )) \u0412 APIOptions \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f tokens , clients , strategy \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0435\u0449\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u0447\u0435\u0440\u0435\u0437 api.default_api_options . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442, \u0442\u043e\u043a\u0435\u043d \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e api = API ( ... ) api . default_api_options . add_token ( tokens = [ ... ]) # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d \u041d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u044d\u0442\u0438\u043c \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442! api_session = API ( ... ) api = api_session . get_context () \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043f\u0438\u0448\u0435\u0442\u0435 \u044d\u0442\u043e - \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 APIOptionsRequestContext . \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 APIOptions . result = await api . status . get () print ( result . response . text )","title":"API"},{"location":"api/api/#api-handler","text":"\u0423 \u0432\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441. \u041a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 API, \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430, \u043d\u0435\u0443\u0436\u0435\u043b\u0438 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u0435\u0437\u0434\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 API? \u041d\u043e \u043d\u0435\u0442, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0430\u043c\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f: from vkwave.bots import SimpleLongPollBot , SimpleBotEvent bot = SimpleLongPollBot ( tokens = 'mytoken' , group_id =- 1 ) @bot . message_handler ( bot . command_filter ( 'getuser' )) async def get_user ( event : SimpleBotEvent ): api = event . api_ctx user_id = event . text . split ()[ 1 ] user_info = ( await api . users . get ( user_ids = user_id )) . response [ 0 ] return f '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435: { user_info } ' \u0427\u0435\u0440\u0435\u0437 \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u043f\u0446\u0438\u044f\u043c API \u0447\u0435\u0440\u0435\u0437 api.pi_options.","title":"API Handler"},{"location":"api/","text":"\u041e\u0431\u0437\u043e\u0440 \u00b6 VKWave API \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f VKWave \u0432\u044b \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043d\u0435\u0439 \u0441\u0442\u043e\u043b\u043a\u043d\u0451\u0442\u0435\u0441\u044c \u041e\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0447\u0430\u0441\u0442\u0435\u0439: \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u043c\u0443\u043b\u044c\u0442\u0438\u0442\u043e\u043a\u0435\u043d\u044b, \u0438\u0442\u0434.) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 VK's API \u043c\u0435\u0442\u043e\u0434\u043e\u0432. \u041e\u0431\u0451\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438.","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"api/#_1","text":"VKWave API \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u0443\u0434\u043e\u0431\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0421\u043a\u043e\u0440\u0435\u0435 \u0432\u0441\u0435\u0433\u043e, \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f VKWave \u0432\u044b \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0441 \u043d\u0435\u0439 \u0441\u0442\u043e\u043b\u043a\u043d\u0451\u0442\u0435\u0441\u044c \u041e\u043d\u0430 \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0447\u0430\u0441\u0442\u0435\u0439: \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 (\u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0435 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043a\u0435\u043d\u043e\u0432, \u043c\u0443\u043b\u044c\u0442\u0438\u0442\u043e\u043a\u0435\u043d\u044b, \u0438\u0442\u0434.) \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 VK's API \u043c\u0435\u0442\u043e\u0434\u043e\u0432. \u041e\u0431\u0451\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u0438 \u043c\u0435\u0442\u043e\u0434\u0430\u043c\u0438.","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"api/work/","text":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u00b6 \u0422\u043e\u043a\u0435\u043d\u044b \u0432 VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 Python \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c get_token . \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c from vkwave.api.token.token import UserSyncSingleToken , BotSyncSingleToken , Token # \u0422\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442 \u0412\u041a bot_plain_token = Token ( \"...\" ) user_plain_token = Token ( \"...\" ) # \u0422\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c bot_token = BotSyncSingleToken ( bot_plain_token ) user_token = UserSyncSingleToken ( user_plain_token ) bot_token . get_token () # ... user_token . get_token () # ... \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0431\u043e\u0442\u0430. import random from typing import List from vkwave.api.token.token import ABCBotSyncToken , Token class BotSyncRandomToken ( ABCBotSyncToken ): def __init__ ( self , tokens : List [ Token ]): self . tokens = tokens def get_token ( self , * args , ** kwargs ) -> Token : return random . choice ( self . tokens ) GetTokenStrategy \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a UserSyncSingleToken \u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e VKWave \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 RandomGetTokenStrategy , \u043e\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 random.choice(tokens) . \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0438\u0436\u0435 \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0441\u0432\u043e\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438 \u043f\u043e \u0441\u0435\u0442\u0438. from vkwave.api.token.strategy import ABCGetTokenStrategy from vkwave.api.token.token import Token , TokenType , GetTokenType # AnyABCToken means really any token. class ServerGetTokenStrategy ( ABCGetTokenStrategy ): token_type = ( TokenType . BOT , TokenType . USER ) get_token_type = ( GetTokenType . SYNC , GetTokenType . ASYNC ) # we will ignore tokens that VKWave gives us. async def get_token ( self , _ ) -> Token : token = await self . some_fancy_api . get_random_token () return token \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u0432 API \u043e\u0431\u0451\u0440\u0442\u043a\u0443. \u041e\u043d \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0438\u0437 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0433\u043e API \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e.","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438"},{"location":"api/work/#_1","text":"\u0422\u043e\u043a\u0435\u043d\u044b \u0432 VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 Python \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c get_token . \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c from vkwave.api.token.token import UserSyncSingleToken , BotSyncSingleToken , Token # \u0422\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442 \u0412\u041a bot_plain_token = Token ( \"...\" ) user_plain_token = Token ( \"...\" ) # \u0422\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c bot_token = BotSyncSingleToken ( bot_plain_token ) user_token = UserSyncSingleToken ( user_plain_token ) bot_token . get_token () # ... user_token . get_token () # ... \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0431\u043e\u0442\u0430. import random from typing import List from vkwave.api.token.token import ABCBotSyncToken , Token class BotSyncRandomToken ( ABCBotSyncToken ): def __init__ ( self , tokens : List [ Token ]): self . tokens = tokens def get_token ( self , * args , ** kwargs ) -> Token : return random . choice ( self . tokens )","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438"},{"location":"api/work/#gettokenstrategy","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a UserSyncSingleToken \u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e VKWave \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 RandomGetTokenStrategy , \u043e\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 random.choice(tokens) . \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0438\u0436\u0435 \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0441\u0432\u043e\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438 \u043f\u043e \u0441\u0435\u0442\u0438. from vkwave.api.token.strategy import ABCGetTokenStrategy from vkwave.api.token.token import Token , TokenType , GetTokenType # AnyABCToken means really any token. class ServerGetTokenStrategy ( ABCGetTokenStrategy ): token_type = ( TokenType . BOT , TokenType . USER ) get_token_type = ( GetTokenType . SYNC , GetTokenType . ASYNC ) # we will ignore tokens that VKWave gives us. async def get_token ( self , _ ) -> Token : token = await self . some_fancy_api . get_random_token () return token \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u0432 API \u043e\u0431\u0451\u0440\u0442\u043a\u0443. \u041e\u043d \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0438\u0437 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0433\u043e API \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e.","title":"GetTokenStrategy"},{"location":"bots/easy/","text":"Easy bots \u00b6 \u041e\u0431\u0451\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 vkwave.bots \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432. from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) @bot . message_handler () def handle ( _ ) -> str : return \"Hello world!\" bot . run_forever () vkwave.bots.easy \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442: \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 from vkwave.bots import create_api_session_aiohttp api_session = create_api_session_aiohttp ( \"TOKEN\" ) # api_session.api.get_context().users.get() \u041f\u0443\u043b \u0442\u043e\u043a\u0435\u043d\u043e\u0432 from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"bye\" )) def handle ( _ ) -> str : return \"bye world\" @bot . message_handler ( bot . text_filter ( \"hello\" )) async def handle ( event : bot . SimpleBotEvent ): await event . answer ( \"hello world!\" ) bot . run_forever () ClonesBot (\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u0442\u043e\u0432 \u0441 \u043e\u0434\u043d\u0438\u043c \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u043c \u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c\u0438, \u0431\u043e\u0442\u044b-\u043a\u043b\u043e\u043d\u044b) from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token1\" , 11111111 ), SimpleLongPollBot ( \"Token2\" , 22222222 ), ) clones . run_all_bots () \u0412\u0441\u0435 \u043a\u043b\u043e\u043d\u044b \u043e\u0442\u0432\u0435\u0442\u044f\u0442 \"Hello world!\" \u043d\u0430 \"hello\". \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c SimpleLongPollBot , \u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u0432 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c - \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c easy_handlers from vkwave.bots import simple_bot_message_handler , SimpleBotEvent , DefaultRouter , TextFilter router = DefaultRouter () @simple_bot_message_handler ( router , TextFilter ( \"hello\" )) async def easy ( event : SimpleBotEvent ): await event . answer ( \"got hello\" ) simple_bot_message_handler \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043f\u043e\u043c\u0438\u043c\u043e \u043d\u0435\u0433\u043e \u0435\u0449\u0435 \u0435\u0441\u0442\u044c: simple_bot_handler (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439), simple_user_handler (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432), simple_user_message_handler.","title":"Easy bots"},{"location":"bots/easy/#easy-bots","text":"\u041e\u0431\u0451\u0440\u0442\u043a\u0430 \u043d\u0430\u0434 vkwave.bots \u0434\u043b\u044f \u0431\u044b\u0441\u0442\u0440\u043e\u0433\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0431\u043e\u0442\u043e\u0432. from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) @bot . message_handler () def handle ( _ ) -> str : return \"Hello world!\" bot . run_forever () vkwave.bots.easy \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442: \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u0435\u0441\u0441\u0438\u0439 from vkwave.bots import create_api_session_aiohttp api_session = create_api_session_aiohttp ( \"TOKEN\" ) # api_session.api.get_context().users.get() \u041f\u0443\u043b \u0442\u043e\u043a\u0435\u043d\u043e\u0432 from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"bye\" )) def handle ( _ ) -> str : return \"bye world\" @bot . message_handler ( bot . text_filter ( \"hello\" )) async def handle ( event : bot . SimpleBotEvent ): await event . answer ( \"hello world!\" ) bot . run_forever () ClonesBot (\u043c\u043d\u043e\u0433\u043e \u0431\u043e\u0442\u043e\u0432 \u0441 \u043e\u0434\u043d\u0438\u043c \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u043c \u0438 \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u044b\u043c\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c\u0438, \u0431\u043e\u0442\u044b-\u043a\u043b\u043e\u043d\u044b) from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token1\" , 11111111 ), SimpleLongPollBot ( \"Token2\" , 22222222 ), ) clones . run_all_bots () \u0412\u0441\u0435 \u043a\u043b\u043e\u043d\u044b \u043e\u0442\u0432\u0435\u0442\u044f\u0442 \"Hello world!\" \u043d\u0430 \"hello\". \u0415\u0441\u043b\u0438 \u0432\u044b \u043d\u0435 \u0445\u043e\u0442\u0438\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c SimpleLongPollBot , \u043d\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u0432 \u0445\u043e\u0447\u0435\u0442\u0441\u044f \u0443\u043f\u0440\u043e\u0441\u0442\u0438\u0442\u044c - \u0432\u043e\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435\u0441\u044c easy_handlers from vkwave.bots import simple_bot_message_handler , SimpleBotEvent , DefaultRouter , TextFilter router = DefaultRouter () @simple_bot_message_handler ( router , TextFilter ( \"hello\" )) async def easy ( event : SimpleBotEvent ): await event . answer ( \"got hello\" ) simple_bot_message_handler \u043d\u0443\u0436\u0435\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0441\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u0445 \u0441 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u043c\u0438, \u043f\u043e\u043c\u0438\u043c\u043e \u043d\u0435\u0433\u043e \u0435\u0449\u0435 \u0435\u0441\u0442\u044c: simple_bot_handler (\u0434\u043b\u044f \u0432\u0441\u0435\u0445 \u0441\u043e\u0431\u044b\u0442\u0438\u0439), simple_user_handler (\u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u043e \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432), simple_user_message_handler.","title":"Easy bots"},{"location":"bots/fsm/","text":"FSM \u00b6 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u0442 Finite-state machine \u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432. FSM \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u0447\u0430\u0442\u0430\u0445 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0430\u0442\u0435, \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u043a\u0430\u0437\u0430\u0442\u044c for_what \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 fsm. \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 - ForWhat.FOR_USER \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0447\u0430\u0442\u0435 - ForWhat.FOR_CHAT \u0414\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0430\u0442\u0435 - ForWhat.FOR_USER_IN_CHAT \u0427\u0442\u043e\u0431\u044b \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b \u0431\u0435\u0437 StateFilter \u043c\u043e\u0433\u043b\u0438 \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440. router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u043f\u0440\u043e\u0441\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c. from vkwave.bots import EventTypeFilter , BotEvent from vkwave.types.bot_events import BotEventType from vkwave.bots.fsm import FiniteStateMachine , StateFilter , ForWhat , State , ANY_STATE fsm = FiniteStateMachine () router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) router . registrar . add_default_filter ( EventTypeFilter ( BotEventType . MESSAGE_NEW . value )) # we don't want to write it in all handlers. class MyState : name = State ( \"name\" ) age = State ( \"age\" ) # \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u044c\u044e @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"start\" , ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . name , for_what = ForWhat . FOR_USER ) return \"Input your name\" # \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u043e\u043f\u0440\u043e\u0441\u0430 (\u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0441\u0442\u0435\u0439\u0442 `state=ANY_STATE`) @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"exit\" , StateFilter ( fsm = fsm , state = ANY_STATE , for_what = ForWhat . FOR_USER ) ) async def simple_handler ( event : BotEvent ): # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u044e\u0437\u0435\u0440 \u0432 \u0431\u0430\u0437\u0435 if await fsm . get_data ( event , for_what = ForWhat . FOR_USER ) is not None : await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return \"You are quited!\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . name , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . age , for_what = ForWhat . FOR_USER , extra_state_data = { \"name\" : event . object . object . message . text }, ) # extra_state_data \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a fsm.add_data(..., state_data={\"name\": event.object.object.message.text}) return \"Input your age\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . age , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): if not event . object . object . message . text . isdigit (): return f \"Please, send only positive numbers!\" await fsm . add_data ( event = event , for_what = ForWhat . FOR_USER , state_data = { \"age\" : event . object . object . message . text }, ) user_data = await fsm . get_data ( event = event , for_what = ForWhat . FOR_USER ) # \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043e\u043f\u0440\u043e\u0441 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u044e\u0437\u0435\u0440\u0430 # `fsm.finish` \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return f \"Your data - { user_data } \" \u0412 \u043a\u043e\u043d\u0446\u0435 \u043e\u043f\u0440\u043e\u0441\u0430 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043d\u0435\u0447\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435\u0435: Your data - {'__vkwave_fsm_state__': '<vkwave.bots_fsm.fsm.State object at 0x0000021C19D61A90>', 'name': 'Nick', 'age': '46'}","title":"FSM"},{"location":"bots/fsm/#fsm","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0438\u043c\u043f\u043b\u0435\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0435\u0442 Finite-state machine \u0434\u043b\u044f \u0431\u043e\u0442\u043e\u0432. FSM \u0440\u0430\u0437\u0434\u0435\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f, \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u0432 \u0447\u0430\u0442\u0430\u0445 \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0430\u0442\u0435, \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b \u0434\u043e\u043b\u0436\u043d\u044b \u0443\u043a\u0430\u0437\u0430\u0442\u044c for_what \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0432 \u043c\u0435\u0442\u043e\u0434\u0430\u0445 fsm. \u0421\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435 \u0434\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043b\u0438\u0447\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f\u0445 - ForWhat.FOR_USER \u0414\u043b\u044f \u0432\u0441\u0435\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0432 \u0447\u0430\u0442\u0435 - ForWhat.FOR_CHAT \u0414\u043b\u044f \u043e\u0434\u043d\u043e\u0433\u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0447\u0430\u0442\u0435 - ForWhat.FOR_USER_IN_CHAT \u0427\u0442\u043e\u0431\u044b \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b \u0431\u0435\u0437 StateFilter \u043c\u043e\u0433\u043b\u0438 \u0431\u044b\u0442\u044c \u0432\u044b\u0431\u0440\u0430\u043d\u044b \u043a\u043e\u0440\u0440\u0435\u043a\u0442\u043d\u043e, \u043d\u0443\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0439 \u0444\u0438\u043b\u044c\u0442\u0440. router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u043f\u0440\u043e\u0441\u0430 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u0438 \u0432\u043e\u0437\u0440\u0430\u0441\u0442\u043e\u043c. from vkwave.bots import EventTypeFilter , BotEvent from vkwave.types.bot_events import BotEventType from vkwave.bots.fsm import FiniteStateMachine , StateFilter , ForWhat , State , ANY_STATE fsm = FiniteStateMachine () router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) router . registrar . add_default_filter ( EventTypeFilter ( BotEventType . MESSAGE_NEW . value )) # we don't want to write it in all handlers. class MyState : name = State ( \"name\" ) age = State ( \"age\" ) # \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u044c\u044e @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"start\" , ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . name , for_what = ForWhat . FOR_USER ) return \"Input your name\" # \u0432\u044b\u0445\u043e\u0434 \u0438\u0437 \u043e\u043f\u0440\u043e\u0441\u0430 (\u0441\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0439 \u0441\u0442\u0435\u0439\u0442 `state=ANY_STATE`) @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"exit\" , StateFilter ( fsm = fsm , state = ANY_STATE , for_what = ForWhat . FOR_USER ) ) async def simple_handler ( event : BotEvent ): # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c \u0435\u0441\u0442\u044c \u043b\u0438 \u044e\u0437\u0435\u0440 \u0432 \u0431\u0430\u0437\u0435 if await fsm . get_data ( event , for_what = ForWhat . FOR_USER ) is not None : await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return \"You are quited!\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . name , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . age , for_what = ForWhat . FOR_USER , extra_state_data = { \"name\" : event . object . object . message . text }, ) # extra_state_data \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a fsm.add_data(..., state_data={\"name\": event.object.object.message.text}) return \"Input your age\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . age , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): if not event . object . object . message . text . isdigit (): return f \"Please, send only positive numbers!\" await fsm . add_data ( event = event , for_what = ForWhat . FOR_USER , state_data = { \"age\" : event . object . object . message . text }, ) user_data = await fsm . get_data ( event = event , for_what = ForWhat . FOR_USER ) # \u0437\u0430\u0432\u0435\u0440\u0448\u0430\u0435\u043c \u043e\u043f\u0440\u043e\u0441 \u0438 \u0443\u0434\u0430\u043b\u044f\u0435\u043c \u044e\u0437\u0435\u0440\u0430 # `fsm.finish` \u0434\u0435\u043b\u0430\u0435\u0442 \u044d\u0442\u043e await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return f \"Your data - { user_data } \" \u0412 \u043a\u043e\u043d\u0446\u0435 \u043e\u043f\u0440\u043e\u0441\u0430 \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435 \u043d\u0435\u0447\u0442\u043e \u043f\u043e\u0445\u043e\u0436\u0435\u0435: Your data - {'__vkwave_fsm_state__': '<vkwave.bots_fsm.fsm.State object at 0x0000021C19D61A90>', 'name': 'Nick', 'age': '46'}","title":"FSM"},{"location":"bots/","text":"Overview \u00b6 \u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c VKWave \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u043e\u0442\u0430\u0445","title":"Overview"},{"location":"bots/#overview","text":"\u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c VKWave \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u044e \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0431\u043e\u0442\u0430\u0445","title":"Overview"},{"location":"bots/routers/","text":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b \u00b6 \u0411\u0435\u0437 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u043e\u0432 \u0432 VKWave \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u042d\u0442\u043e \u043e\u0434\u043d\u0430 \u0438\u0437 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u043e\u0442\u0435. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0432\u0430\u0448 \u0431\u043e\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438. \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c. \u0420\u0430\u0437\u0431\u0438\u0442\u0438\u0435 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u041f\u043e\u0441\u043e\u0431\u0438\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c \u00b6 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435: from vkwave.bots import DefaultRouter router = DefaultRouter () # also you can pass here filters # it can be like: router = Router(SomeFilter(...)) \u041a\u0430\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b? \u0411\u043e\u043b\u044c\u0448\u0435 \u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u0432 handlers.md . r = router . registrar # just a shortcut handler = r . new () . with_filters ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) . handle ( \"hey!\" ) # here we are creating the handler that answers 'hey' to messages with content 'hi there' r . register ( handler ) # and.. we register it. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b. @r . with_decorator ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) def handler ( event : BaseEvent ) -> str : return \"Hey!\" \u0415\u0441\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u043d\u043e \u043e\u043d \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u043e\u0432\u0441\u0435\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. registrar \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0446\u0438\u044e \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432. \u041e\u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043a\u043e \u0432\u0441\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0435. router . registrar . add_default_filter ( SomeFilter ( ... )) \u0418 \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u043e\u0443\u0442\u0435\u0440 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440 ( dispatcher.md , please). dp . add_router ( router ) \u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u00b6 \u0414\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440. \u041f\u0440\u0438\u043c\u0435\u0440 \u0431\u043e\u0442\u0430 VkWaveBotExample","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"bots/routers/#_1","text":"\u0411\u0435\u0437 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u043e\u0432 \u0432 VKWave \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u042d\u0442\u043e \u043e\u0434\u043d\u0430 \u0438\u0437 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u043e\u0442\u0435. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0432\u0430\u0448 \u0431\u043e\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438. \u0421\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c. \u0420\u0430\u0437\u0431\u0438\u0442\u0438\u0435 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"bots/routers/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435: from vkwave.bots import DefaultRouter router = DefaultRouter () # also you can pass here filters # it can be like: router = Router(SomeFilter(...)) \u041a\u0430\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b? \u0411\u043e\u043b\u044c\u0448\u0435 \u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u0432 handlers.md . r = router . registrar # just a shortcut handler = r . new () . with_filters ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) . handle ( \"hey!\" ) # here we are creating the handler that answers 'hey' to messages with content 'hi there' r . register ( handler ) # and.. we register it. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b. @r . with_decorator ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) def handler ( event : BaseEvent ) -> str : return \"Hey!\" \u0415\u0441\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u043d\u043e \u043e\u043d \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u043e\u0432\u0441\u0435\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. registrar \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0446\u0438\u044e \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432. \u041e\u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043a\u043e \u0432\u0441\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0435. router . registrar . add_default_filter ( SomeFilter ( ... )) \u0418 \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u043e\u0443\u0442\u0435\u0440 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440 ( dispatcher.md , please). dp . add_router ( router )","title":"\u041f\u043e\u0441\u043e\u0431\u0438\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c"},{"location":"bots/routers/#_3","text":"\u0414\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440. \u041f\u0440\u0438\u043c\u0435\u0440 \u0431\u043e\u0442\u0430 VkWaveBotExample","title":"\u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c"},{"location":"bots/storage/","text":"Storage \u00b6 \u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0431\u043e\u0442\u0430. \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449: - dict-like \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 - ttl \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 - redis \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 import asyncio from vkwave.bots.storage.storages import Storage from vkwave.bots.storage.types import Key storage = Storage () async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 ) print ( await storage . contains ( my_key )) # True await storage . delete ( my_key ) print ( await storage . contains ( my_key )) # False print ( await storage . get ( my_key , default = 789 )) # 789 if __name__ == '__main__' : asyncio . get_event_loop () . run_until_complete ( main ()) \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b time-to-life \u043a\u043b\u044e\u0447\u0438: from vkwave.bots.storage.storages import TTLStorage from vkwave.bots.storage.types import Key storage = TTLStorage ( default_ttl = 10 ) async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Redis: from vkwave.bots.storage.storages import RedisStorage storage = RedisStorage ( default_ttl = 10 ) # you can also specify the host, port, db and password async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False await storage . close () await storage . wait_closed ()","title":"Storage"},{"location":"bots/storage/#storage","text":"\u042d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432\u0430\u043c \u0445\u0440\u0430\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043d\u0443\u0442\u0440\u0438 \u0431\u043e\u0442\u0430. \u0423 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c \u0432\u044b\u0431\u043e\u0440 \u0438\u0437 \u0442\u0440\u0451\u0445 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449: - dict-like \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 - ttl \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 - redis \u0445\u0440\u0430\u043d\u0438\u043b\u0438\u0449\u0435 import asyncio from vkwave.bots.storage.storages import Storage from vkwave.bots.storage.types import Key storage = Storage () async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 ) print ( await storage . contains ( my_key )) # True await storage . delete ( my_key ) print ( await storage . contains ( my_key )) # False print ( await storage . get ( my_key , default = 789 )) # 789 if __name__ == '__main__' : asyncio . get_event_loop () . run_until_complete ( main ()) \u0415\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u044b time-to-life \u043a\u043b\u044e\u0447\u0438: from vkwave.bots.storage.storages import TTLStorage from vkwave.bots.storage.types import Key storage = TTLStorage ( default_ttl = 10 ) async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False \u0415\u0441\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0435 Redis: from vkwave.bots.storage.storages import RedisStorage storage = RedisStorage ( default_ttl = 10 ) # you can also specify the host, port, db and password async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False await storage . close () await storage . wait_closed ()","title":"Storage"},{"location":"bots/usage/","text":"Usage \u00b6 \u0421 \u044d\u0442\u0438\u043c \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0431\u043e\u0442\u043e\u0432 \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 6 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0434\u0430. \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c \u0431\u043e\u0442\u0430-\u0433\u0440\u0443\u043f\u043f\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f message_new \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c hello \u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442 \u0434\u043b\u044f API. import logging import asyncio from vkwave.client import AIOHTTPClient from vkwave.api import BotSyncSingleToken , Token , API from vkwave.bots import ( TokenStorage , Dispatcher , BotLongpollExtension , DefaultRouter , GroupId , EventTypeFilter , ) from vkwave.types.bot_events import BotEventType from vkwave.longpoll import BotLongpollData , BotLongpoll logging . basicConfig ( level = logging . DEBUG ) bot_token = Token ( \"123\" ) gid = 456 async def main (): client = AIOHTTPClient () token = BotSyncSingleToken ( bot_token ) api_session = API ( token , client ) api = api_session . get_context () lp_data = BotLongpollData ( gid ) longpoll = BotLongpoll ( api , lp_data ) token_storage = TokenStorage [ GroupId ]() dp = Dispatcher ( api_session , token_storage ) lp_extension = BotLongpollExtension ( dp , longpoll ) router = DefaultRouter () simple_handler = ( router . registrar . new () . with_filters ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) . handle ( lambda event : f \"hello, { event . object . object . message . from_id } \" ) . ready () ) # >> hello # >> hello, 578716413 router . registrar . register ( simple_handler ) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () if __name__ == \"__main__\" : loop = asyncio . get_event_loop () loop . create_task ( main ()) loop . run_forever () \u0414\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430. ... class TextFilter ( BaseFilter ): async def check ( self , event : BotEvent ) -> FilterResult : return FilterResult ( event . object . object . message . text == \"hello\" ) class MyCallback ( BaseCallback ): def __init__ ( self , func : Callable [[ BaseEvent ], Awaitable [ Any ]]): self . func = func async def execute ( self , event : BaseEvent ) -> Any : # do smth await asyncio . sleep ( 5 ) return await self . func ( event ) async def answer ( event : BotEvent ): event : BotEvent return f \"hello, { event . object . object . message . from_id } \" def get_handler ( router ): event_type_filter = EventTypeFilter ( BotEventType . MESSAGE_NEW ) text_filter = TextFilter () result_callback = MyCallback ( answer ) simple_handler = router . registrar . new () simple_handler . filters = [ event_type_filter , text_filter ] simple_handler . callback = result_callback return simple_handler async def main (): ... simple_handler = get_handler ( router ) router . registrar . register ( simple_handler . ready ()) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () \u0418 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d. router = DefaultRouter () @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) def simple_handler ( event : BotEvent ): return f \"hello, { event . object . object . message . from_id } \" @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"bye\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) async def another_simple_handler ( event : BotEvent ): return await event . api_ctx . messages . send ( message = f \"bye, { event . object . object . message . from_id } \" , random_id = 0 , user_id = event . object . object . message . from_id , )","title":"Usage"},{"location":"bots/usage/#usage","text":"\u0421 \u044d\u0442\u0438\u043c \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0431\u043e\u0442\u043e\u0432 \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 6 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0434\u0430. \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c \u0431\u043e\u0442\u0430-\u0433\u0440\u0443\u043f\u043f\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f message_new \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c hello \u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442 \u0434\u043b\u044f API. import logging import asyncio from vkwave.client import AIOHTTPClient from vkwave.api import BotSyncSingleToken , Token , API from vkwave.bots import ( TokenStorage , Dispatcher , BotLongpollExtension , DefaultRouter , GroupId , EventTypeFilter , ) from vkwave.types.bot_events import BotEventType from vkwave.longpoll import BotLongpollData , BotLongpoll logging . basicConfig ( level = logging . DEBUG ) bot_token = Token ( \"123\" ) gid = 456 async def main (): client = AIOHTTPClient () token = BotSyncSingleToken ( bot_token ) api_session = API ( token , client ) api = api_session . get_context () lp_data = BotLongpollData ( gid ) longpoll = BotLongpoll ( api , lp_data ) token_storage = TokenStorage [ GroupId ]() dp = Dispatcher ( api_session , token_storage ) lp_extension = BotLongpollExtension ( dp , longpoll ) router = DefaultRouter () simple_handler = ( router . registrar . new () . with_filters ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) . handle ( lambda event : f \"hello, { event . object . object . message . from_id } \" ) . ready () ) # >> hello # >> hello, 578716413 router . registrar . register ( simple_handler ) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () if __name__ == \"__main__\" : loop = asyncio . get_event_loop () loop . create_task ( main ()) loop . run_forever () \u0414\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430. ... class TextFilter ( BaseFilter ): async def check ( self , event : BotEvent ) -> FilterResult : return FilterResult ( event . object . object . message . text == \"hello\" ) class MyCallback ( BaseCallback ): def __init__ ( self , func : Callable [[ BaseEvent ], Awaitable [ Any ]]): self . func = func async def execute ( self , event : BaseEvent ) -> Any : # do smth await asyncio . sleep ( 5 ) return await self . func ( event ) async def answer ( event : BotEvent ): event : BotEvent return f \"hello, { event . object . object . message . from_id } \" def get_handler ( router ): event_type_filter = EventTypeFilter ( BotEventType . MESSAGE_NEW ) text_filter = TextFilter () result_callback = MyCallback ( answer ) simple_handler = router . registrar . new () simple_handler . filters = [ event_type_filter , text_filter ] simple_handler . callback = result_callback return simple_handler async def main (): ... simple_handler = get_handler ( router ) router . registrar . register ( simple_handler . ready ()) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () \u0418 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d. router = DefaultRouter () @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) def simple_handler ( event : BotEvent ): return f \"hello, { event . object . object . message . from_id } \" @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"bye\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) async def another_simple_handler ( event : BotEvent ): return await event . api_ctx . messages . send ( message = f \"bye, { event . object . object . message . from_id } \" , random_id = 0 , user_id = event . object . object . message . from_id , )","title":"Usage"},{"location":"client/context/","text":"\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u00b6 \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0435 client.create_request \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0435 \u0435\u0433\u043e \u043f\u043e\u0441\u043b\u0435 send_request ) \u0438 \u043e\u0448\u0438\u0431\u043a\u0430\u0445. \u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u00b6 \u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. \u041e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 RequestContext \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c\u0438 \u0434\u043b\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439. \u041e\u0434\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0445\u0435\u043d\u0434\u043b\u0435\u0440. # ... async def timeout_handler ( ctx : RequestContext ) -> None : # \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c ctx . result . exception_data = { \"data\" : \"Exception was occurred..\" } # ... ctx . set_exception_handler ( TimeoutException , timeout_handler ) # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0430 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430 await ctx . send_request () # \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442 TimeoutException, \u043e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0448\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0435 if ctx . result . state is ResultState . HANDLED_EXCEPTION : data = ctx . result . exception_data elif ctx . result . state is ResultState . UNHANDLED_EXCEPTION : print ( f \"Exception is { ctx . result . exception } \" ) sys . exit ( - 1 ) else : data = ctx . result . data print ( data )","title":"\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442"},{"location":"client/context/#_1","text":"\u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0435 client.create_request \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u044d\u0442\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430. \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u043a\u043e\u043d\u0435\u0447\u043d\u043e, \u0435\u0441\u043b\u0438 \u0432\u044b \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0435 \u0435\u0433\u043e \u043f\u043e\u0441\u043b\u0435 send_request ) \u0438 \u043e\u0448\u0438\u0431\u043a\u0430\u0445.","title":"\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442"},{"location":"client/context/#_2","text":"\u041a\u043b\u0438\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f. \u041e\u043d\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0442\u044c \u0438\u0445 \u0432 RequestContext \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c\u0438 \u0434\u043b\u044f \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439. \u041e\u0434\u043d\u043e \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442 \u0438\u043c\u0435\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0445\u0435\u043d\u0434\u043b\u0435\u0440. # ... async def timeout_handler ( ctx : RequestContext ) -> None : # \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u043b\u043e\u0432\u0430\u0440\u044c ctx . result . exception_data = { \"data\" : \"Exception was occurred..\" } # ... ctx . set_exception_handler ( TimeoutException , timeout_handler ) # \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c \u043e\u0448\u0438\u0431\u043a\u0430 \u0442\u0430\u0439\u043c\u0430\u0443\u0442\u0430 await ctx . send_request () # \u0435\u0441\u043b\u0438 \u043f\u0440\u043e\u0438\u0437\u043e\u0439\u0434\u0435\u0442 TimeoutException, \u043e\u0448\u0438\u0431\u043a\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0448\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0435 if ctx . result . state is ResultState . HANDLED_EXCEPTION : data = ctx . result . exception_data elif ctx . result . state is ResultState . UNHANDLED_EXCEPTION : print ( f \"Exception is { ctx . result . exception } \" ) sys . exit ( - 1 ) else : data = ctx . result . data print ( data )","title":"\u0418\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f"},{"location":"client/custom/","text":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b \u00b6 \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 VKWave \u0434\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u0438. \u041a\u043e\u043d\u0435\u0447\u043d\u043e \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u0444\u0438\u0448\u043a\u0438, \u043d\u043e VKWave \u0434\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0440 \u0434\u043b\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439. \u0414\u043b\u044f \u0447\u0435\u0433\u043e? \u00b6 \u041f\u043e\u043a\u0430 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0443 \u043d\u0430\u0441 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b. \u041b\u0438\u043c\u0438\u0442\u044b \u0432 API, \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a\u043e\u0432 \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0435\u0448\u0438\u0442\u044c, \u043f\u0443\u0442\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0433\u043e \u043a\u043e\u0434\u0430. VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 - \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c low-level \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0418 \u0434\u0430, VKWave \u0434\u0430\u0435\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u043c \u043f\u0443\u0442\u0435\u043c, \u0432\u0430\u0448 \u043a\u043e\u0434 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f high-level . \u041f\u0440\u0438\u043c\u0435\u0440 \u00b6 \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u044f \u043f\u043e\u043a\u0430\u0436\u0443 \u0432\u0430\u043c \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0447\u0435\u043c \u0443\u0433\u043e\u0434\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440. Note : \u0422\u0430\u0439\u043f \u0445\u0438\u043d\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435. from vkwave.client.factory import DefaultFactory , AbstractFactory async def callback ( method_name , params : dict ): return { \"response\" : { \"text\" : \"it's fake!\" }} class FakeClient ( AbstractHTTPClient ): def __init__ ( self ): self . _factory = DefaultFactory () @property def context_factory ( self ) -> AbstractFactory : return self . _factory def set_context_factory ( self , factory : AbstractFactory ): self . _factory = factory async def request ( self , method_name , params : dict ): ctx = self . context_factory . create_context ( request_callback = callback , method_name = method_name , request_params = params , exceptions = {}, ) return ctx async def close ( self ): print ( \"closing nothing...\" ) \u0414\u0440\u0443\u0433\u0438\u0435 \u0447\u0430\u0441\u0442\u0438 vkwave core \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c http \u043a\u043b\u0438\u0435\u043d\u0442 \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442.","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b"},{"location":"client/custom/#_1","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 VKWave \u0434\u0430\u0435\u0442 \u0445\u043e\u0440\u043e\u0448\u0438\u0435 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u0434\u043b\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u0438\u0437\u0430\u0446\u0438\u0438. \u041a\u043e\u043d\u0435\u0447\u043d\u043e \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0438\u043c\u0435\u044e\u0442 \u043f\u043e\u0445\u043e\u0436\u0438\u0435 \u0444\u0438\u0448\u043a\u0438, \u043d\u043e VKWave \u0434\u0430\u0435\u0442 \u0431\u043e\u043b\u044c\u0448\u0438\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0440 \u0434\u043b\u044f \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439.","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u044b"},{"location":"client/custom/#_2","text":"\u041f\u043e\u043a\u0430 \u043c\u044b \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0443 \u043d\u0430\u0441 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u044e\u0442 \u043f\u0440\u043e\u0431\u043b\u0435\u043c\u044b. \u041b\u0438\u043c\u0438\u0442\u044b \u0432 API, \u043f\u043e\u0436\u0435\u043b\u0430\u043d\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u0447\u0438\u043a\u043e\u0432 \u0438 \u043f\u043e\u0434\u043e\u0431\u043d\u044b\u0435. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0438\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0440\u0435\u0448\u0438\u0442\u044c, \u043f\u0443\u0442\u0435\u043c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u043e\u0433\u043e \u043a\u043e\u0434\u0430. VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0434\u0440\u0443\u0433\u043e\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 - \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u043e\u0432\u0430\u0442\u044c low-level \u0432\u0430\u0448\u0435\u0433\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u0418 \u0434\u0430, VKWave \u0434\u0430\u0435\u0442 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u0435\u0439\u0448\u0438\u043c \u043f\u0443\u0442\u0435\u043c, \u0432\u0430\u0448 \u043a\u043e\u0434 \u043e\u0441\u0442\u0430\u043d\u0435\u0442\u0441\u044f high-level .","title":"\u0414\u043b\u044f \u0447\u0435\u0433\u043e?"},{"location":"client/custom/#_3","text":"\u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u044f \u043f\u043e\u043a\u0430\u0436\u0443 \u0432\u0430\u043c \u043a\u0430\u043a \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u043e\u0434\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0438\u0435\u043d\u0442. \u0412 \u0440\u0435\u0430\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0447\u0435\u043c \u0443\u0433\u043e\u0434\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432 \u0434\u0440\u0443\u0433\u043e\u0439 \u0441\u0435\u0440\u0432\u0435\u0440. Note : \u0422\u0430\u0439\u043f \u0445\u0438\u043d\u0442\u044b \u0431\u0443\u0434\u0443\u0442 \u043e\u043f\u0443\u0449\u0435\u043d\u044b \u0432 \u0434\u0430\u043d\u043d\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435. from vkwave.client.factory import DefaultFactory , AbstractFactory async def callback ( method_name , params : dict ): return { \"response\" : { \"text\" : \"it's fake!\" }} class FakeClient ( AbstractHTTPClient ): def __init__ ( self ): self . _factory = DefaultFactory () @property def context_factory ( self ) -> AbstractFactory : return self . _factory def set_context_factory ( self , factory : AbstractFactory ): self . _factory = factory async def request ( self , method_name , params : dict ): ctx = self . context_factory . create_context ( request_callback = callback , method_name = method_name , request_params = params , exceptions = {}, ) return ctx async def close ( self ): print ( \"closing nothing...\" ) \u0414\u0440\u0443\u0433\u0438\u0435 \u0447\u0430\u0441\u0442\u0438 vkwave core \u0431\u0443\u0434\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c http \u043a\u043b\u0438\u0435\u043d\u0442 \u043a\u0430\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442.","title":"\u041f\u0440\u0438\u043c\u0435\u0440"},{"location":"client/","text":"Overview \u00b6 \u0421\u0430\u043c\u0430\u044f \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c VKWave.","title":"Overview"},{"location":"client/#overview","text":"\u0421\u0430\u043c\u0430\u044f \u043d\u0438\u0437\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u0430\u044f \u0447\u0430\u0441\u0442\u044c VKWave.","title":"Overview"},{"location":"client/using/","text":"Using \u00b6 \u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u043d\u043e \u0447\u0442\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f VKWave. How to \u00b6 \u042d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e. from vkwave.client.default import AIOHTTPClient from vkwave.client.context import ResultState import asyncio async def main (): base_params = { \"access_token\" : \"xxxxxx\" , \"v\" : \"5.103\" } client = AIOHTTPClient () ctx = client . create_request ( \"status.get\" , ** base_params ) await ctx . send_request () if ctx . result . state is ResultState . SUCCESS : print ( ctx . result . data [ \"response\" ][ \"text\" ]) else : print ( ctx . result . exception ) await client . close () asyncio . run ( main ())","title":"Using"},{"location":"client/using/#using","text":"\u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u043d\u0435 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0430 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e, \u043d\u043e \u0447\u0442\u0435\u043d\u0438\u0435 \u044d\u0442\u043e\u0433\u043e \u0431\u0443\u0434\u0435\u0442 \u043f\u043e\u043b\u0435\u0437\u043d\u044b\u043c \u0435\u0441\u043b\u0438 \u0432\u044b \u0445\u043e\u0442\u0438\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u0434\u043b\u044f VKWave.","title":"Using"},{"location":"client/using/#how-to","text":"\u042d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e. from vkwave.client.default import AIOHTTPClient from vkwave.client.context import ResultState import asyncio async def main (): base_params = { \"access_token\" : \"xxxxxx\" , \"v\" : \"5.103\" } client = AIOHTTPClient () ctx = client . create_request ( \"status.get\" , ** base_params ) await ctx . send_request () if ctx . result . state is ResultState . SUCCESS : print ( ctx . result . data [ \"response\" ][ \"text\" ]) else : print ( ctx . result . exception ) await client . close () asyncio . run ( main ())","title":"How to"},{"location":"getting_started/clones/","text":"\u0411\u043e\u0442\u044b-\u043a\u043b\u043e\u043d\u044b \u00b6 \u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043f\u0438\u0439 \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u0431\u043e\u0442\u0430 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430\u0445, \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ClonesBot from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( \"Token1\" , 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token2\" , 11111111 ), SimpleLongPollBot ( \"Token3\" , 22222222 ), ) clones . run_all_bots ()","title":"\u0411\u043e\u0442\u044b-\u043a\u043b\u043e\u043d\u044b"},{"location":"getting_started/clones/#-","text":"\u0415\u0441\u043b\u0438 \u0432\u043e\u0437\u043d\u0438\u043a\u0430\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u044c \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043e\u043f\u0438\u0439 \u043e\u0434\u043d\u043e\u0433\u043e \u0438 \u0442\u043e\u0433\u043e \u0436\u0435 \u0431\u043e\u0442\u0430 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u0441\u0442\u0432\u0430\u0445, \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c ClonesBot from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( \"Token1\" , 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token2\" , 11111111 ), SimpleLongPollBot ( \"Token3\" , 22222222 ), ) clones . run_all_bots ()","title":"\u0411\u043e\u0442\u044b-\u043a\u043b\u043e\u043d\u044b"},{"location":"getting_started/echo/","text":"\u042d\u0445\u043e-\u0431\u043e\u0442 \u00b6 \u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c \u044d\u0442\u043e \u0431\u043e\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0441\u044b\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u0436\u0435. # \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b from vkwave.bots import SimpleLongPollBot , SimpleBotEvent # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u043e\u0442\u0430 bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) # \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0443\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043b\u043e\u0432\u0438\u0442\u044c \u0432\u0441\u0435 \u043d\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f... @bot . message_handler () def echo ( event : SimpleBotEvent ) -> str : return event . object . object . message . text # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u043d\u0438\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f bot . run_forever () # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0431\u043e\u0442\u0430","title":"\u042d\u0445\u043e-\u0431\u043e\u0442"},{"location":"getting_started/echo/#-","text":"\u0421\u0430\u043c\u044b\u0439 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u043f\u0440\u0438\u043c\u0435\u0440 \u0434\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u043e\u043c \u044d\u0442\u043e \u0431\u043e\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0438\u0441\u044b\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u0436\u0435. # \u0418\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u043c \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b from vkwave.bots import SimpleLongPollBot , SimpleBotEvent # \u0421\u043e\u0437\u0434\u0430\u0451\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0431\u043e\u0442\u0430 bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) # \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0443\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0431\u0443\u0434\u0435\u0442 \u043b\u043e\u0432\u0438\u0442\u044c \u0432\u0441\u0435 \u043d\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f... @bot . message_handler () def echo ( event : SimpleBotEvent ) -> str : return event . object . object . message . text # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0442\u044c \u043d\u0430 \u043d\u0438\u0445 \u0442\u0435\u043a\u0441\u0442\u043e\u043c \u043d\u043e\u0432\u043e\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f bot . run_forever () # \u0417\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u0431\u043e\u0442\u0430","title":"\u042d\u0445\u043e-\u0431\u043e\u0442"},{"location":"getting_started/events/","text":"\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u00b6 \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 SimpleBotEvent vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent ( BotEvent ) \u00b6 \u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441\u043e\u0431\u044b\u0442\u0438\u044f. api_ctx : APIOptionsRequestContext inherited property readonly \u00b6 \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 API \u0412\u041a. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b API \u0412\u041a \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0431\u043e\u0442\u0430. Returns: Type Description APIOptionsRequestContext \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 API attachments : Optional [ List [ vkwave . bots . addons . easy . easy_handlers . SimpleAttachment ]] property readonly \u00b6 \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 Returns: Type Description Optional[List[SimpleAttachment]] \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 from_id : int property readonly \u00b6 \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f Returns: Type Description int \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f payload : Optional [ dict ] property readonly \u00b6 \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 payload \u0441\u043e\u0431\u044b\u0442\u0438\u044f Returns: Type Description int payload \u0441\u043e\u0431\u044b\u0442\u0438\u044f peer_id : int property readonly \u00b6 \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0447\u0430\u0442\u0430 Returns: Type Description int \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0447\u0430\u0442\u0430 text : str property readonly \u00b6 \u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Returns: Type Description str \u0422\u0435\u043a\u0441\u0442 user_id : int property readonly \u00b6 \u0428\u043e\u0440\u0442\u043a\u0430\u0442 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 from_id \u0438\u043b\u0438 peer_id Returns: Type Description int \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f answer ( self , message = None , domain = None , lat = None , long = None , attachment = None , reply_to = None , forward_messages = None , forward = None , sticker_id = None , group_id = None , keyboard = None , template = None , payload = None , content_source = None , dont_parse_links = None , disable_mentions = None , intent = None , subscribe_id = None , expire_ttl = None , silent = None ) async \u00b6 \u0428\u043e\u0440\u0442\u043a\u0430\u0442 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0440\u0438\u0448\u043b\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u0435. Parameters: Name Type Description Default message Optional[str] \u0422\u0435\u043a\u0441\u0442. None domain Optional[str] \u041a\u043e\u0440\u043e\u0442\u043a\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. None lat Optional[int] \u0428\u0438\u0440\u043e\u0442\u0430. None long Optional[int] \u0414\u043e\u043b\u0433\u043e\u0442\u0430. None attachment Optional[str] \u0412\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u043f\u044f\u0442\u043e\u0439). None reply_to Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c. None forward_messages Optional[List[int]] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0435\u043c\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. None forward Optional[str] JSON-\u043e\u0431\u044a\u0435\u043a\u0442 (\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0412\u041a ). None sticker_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u0442\u0438\u043a\u0435\u0440\u0430. None group_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b. None keyboard Optional[str] \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430. None template Optional[str] \u0428\u0430\u0431\u043b\u043e\u043d (\u043a\u0430\u0440\u0443\u0441\u0435\u043b\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440). None payload Optional[str] Payload. None content_source Optional[str] \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 . None dont_parse_links Optional[bool] 1 \u2014 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043d\u0438\u043f\u043f\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u0438\u0437 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None disable_mentions Optional[bool] 1 \u2014 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439. None intent Optional[str] \u0421\u0442\u0440\u043e\u043a\u0430, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0438\u043d\u0442\u0435\u043d\u0442\u044b . None subscribe_id Optional[int] \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0438\u043d\u0442\u0435\u043d\u0442\u0430\u043c\u0438. None expire_ttl Optional[int] ???. None silent Optional[bool] ???. None Returns: Type Description MessagesSendResponse \u041e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 callback_answer ( self , event_data ) async \u00b6 \u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043d\u0430\u0436\u0430\u0442\u0438\u0435 callback \u043a\u043d\u043e\u043f\u043a\u0438. Parameters: Name Type Description Default event_data Dict[str, str] \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 callback required Exceptions: Type Description RuntimeError \u0415\u0441\u043b\u0438 \u0432\u044b\u0437\u0432\u0430\u043d, \u043a\u043e\u0433\u0434\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0435 MessageEvent \u0442\u0438\u043f\u0430. Returns: Type Description BaseOkResponse \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430 edit ( self , message = None , lat = None , long = None , attachment = None , keep_forward_messages = None , keep_snippets = None , group_id = None , dont_parse_links = None , disable_mentions = None , message_id = None , conversation_message_id = None , template = None , keyboard = None ) async \u00b6 \u0428\u043e\u0440\u0442\u043a\u0430\u0442 \u0434\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. Parameters: Name Type Description Default message Optional[str] \u0422\u0435\u043a\u0441\u0442. None lat Optional[int] \u0428\u0438\u0440\u043e\u0442\u0430. None long Optional[int] \u0414\u043e\u043b\u0433\u043e\u0442\u0430. None attachment Optional[str] \u0412\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u043f\u044f\u0442\u043e\u0439). None keep_forward_messages Optional[BaseBoolInt] \u2014 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u043b\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None keep_snippets Optional[BaseBoolInt] 1 \u2014 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u043d\u044b\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 (\u0441\u043d\u0438\u043f\u043f\u0435\u0442\u044b). None group_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b. None dont_parse_links Optional[bool] 1 \u2014 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043d\u0438\u043f\u043f\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u0438\u0437 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None disable_mentions Optional[bool] 1 \u2014 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0438 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438. None message_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None conversation_message_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0431\u0435\u0441\u0435\u0434\u0435. None template Optional[str] \u0428\u0430\u0431\u043b\u043e\u043d. None keyboard Optional[str] \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430. None Returns: Type Description MessagesEditResponse \u041e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 get_user ( self , raw_mode = False , ** kwargs ) async \u00b6 \u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f Returns: Type Description Union[\"UsersUser\", dict] \u041e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f reply ( self , message = None , domain = None , lat = None , long = None , attachment = None , sticker_id = None , group_id = None , keyboard = None , template = None , payload = None , content_source = None , dont_parse_links = None , disable_mentions = None , intent = None , subscribe_id = None , expire_ttl = None , silent = None , json_serialize =< function dumps at 0x00000256D4FD4DC0 > ) async \u00b6 \u0428\u043e\u0440\u0442\u043a\u0430\u0442 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0440\u0438\u0448\u043b\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u0435 Parameters: Name Type Description Default message Optional[str] \u0422\u0435\u043a\u0441\u0442. None domain Optional[str] \u041a\u043e\u0440\u043e\u0442\u043a\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. None lat Optional[int] \u0428\u0438\u0440\u043e\u0442\u0430. None long Optional[int] \u0414\u043e\u043b\u0433\u043e\u0442\u0430. None attachment Optional[str] \u0412\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u043f\u044f\u0442\u043e\u0439). None sticker_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u0442\u0438\u043a\u0435\u0440\u0430. None group_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b. None keyboard Optional[str] \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430. None template Optional[str] \u0428\u0430\u0431\u043b\u043e\u043d (\u043a\u0430\u0440\u0443\u0441\u0435\u043b\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440). None payload Optional[str] Payload. None content_source Optional[str] \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 . None dont_parse_links Optional[bool] 1 \u2014 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043d\u0438\u043f\u043f\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u0438\u0437 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None disable_mentions Optional[bool] 1 \u2014 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439. None intent Optional[str] \u0421\u0442\u0440\u043e\u043a\u0430, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0438\u043d\u0442\u0435\u043d\u0442\u044b . None subscribe_id Optional[int] \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0438\u043d\u0442\u0435\u043d\u0442\u0430\u043c\u0438. None expire_ttl Optional[int] ???. None silent Optional[bool] ???. None json_serialize JSONEncoder \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f. <function dumps at 0x00000256D4FD4DC0> Returns: Type Description MessagesSendResponse MessagesSendResponse - \u041e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 set_activity ( self , type = None , user_id = None , group_id = None ) async \u00b6 \u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 Parameters: Name Type Description Default type Optional[str] \u0422\u0438\u043f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438. ( typing \u2014 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0447\u0430\u043b \u043d\u0430\u0431\u0438\u0440\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442, audiomessage \u2014 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435) None user_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f. None group_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b. None Returns: Type Description MessagesSendResponse \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.","title":"\u0421\u043e\u0431\u044b\u0442\u0438\u044f"},{"location":"getting_started/events/#_1","text":"\u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 SimpleBotEvent","title":"\u0421\u043e\u0431\u044b\u0442\u0438\u044f"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent","text":"\u0411\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0441\u043e\u0431\u044b\u0442\u0438\u044f.","title":"SimpleBotEvent"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.api_ctx","text":"\u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 API \u0412\u041a. \u041f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b API \u0412\u041a \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0431\u043e\u0442\u0430. Returns: Type Description APIOptionsRequestContext \u041a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 API","title":"api_ctx"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.attachments","text":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 Returns: Type Description Optional[List[SimpleAttachment]] \u0441\u043f\u0438\u0441\u043e\u043a \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439","title":"attachments"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.from_id","text":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f Returns: Type Description int \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f","title":"from_id"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.payload","text":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 payload \u0441\u043e\u0431\u044b\u0442\u0438\u044f Returns: Type Description int payload \u0441\u043e\u0431\u044b\u0442\u0438\u044f","title":"payload"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.peer_id","text":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0447\u0430\u0442\u0430 Returns: Type Description int \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0447\u0430\u0442\u0430","title":"peer_id"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.text","text":"\u041f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f Returns: Type Description str \u0422\u0435\u043a\u0441\u0442","title":"text"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.user_id","text":"\u0428\u043e\u0440\u0442\u043a\u0430\u0442 \u0434\u043b\u044f \u0432\u044b\u0431\u043e\u0440\u0430 from_id \u0438\u043b\u0438 peer_id Returns: Type Description int \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","title":"user_id"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.answer","text":"\u0428\u043e\u0440\u0442\u043a\u0430\u0442 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0440\u0438\u0448\u043b\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u0435. Parameters: Name Type Description Default message Optional[str] \u0422\u0435\u043a\u0441\u0442. None domain Optional[str] \u041a\u043e\u0440\u043e\u0442\u043a\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. None lat Optional[int] \u0428\u0438\u0440\u043e\u0442\u0430. None long Optional[int] \u0414\u043e\u043b\u0433\u043e\u0442\u0430. None attachment Optional[str] \u0412\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u043f\u044f\u0442\u043e\u0439). None reply_to Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043d\u0443\u0436\u043d\u043e \u043e\u0442\u0432\u0435\u0442\u0438\u0442\u044c. None forward_messages Optional[List[int]] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u044b \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0435\u043c\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439. None forward Optional[str] JSON-\u043e\u0431\u044a\u0435\u043a\u0442 (\u043f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0412\u041a ). None sticker_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u0442\u0438\u043a\u0435\u0440\u0430. None group_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b. None keyboard Optional[str] \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430. None template Optional[str] \u0428\u0430\u0431\u043b\u043e\u043d (\u043a\u0430\u0440\u0443\u0441\u0435\u043b\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440). None payload Optional[str] Payload. None content_source Optional[str] \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 . None dont_parse_links Optional[bool] 1 \u2014 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043d\u0438\u043f\u043f\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u0438\u0437 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None disable_mentions Optional[bool] 1 \u2014 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439. None intent Optional[str] \u0421\u0442\u0440\u043e\u043a\u0430, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0438\u043d\u0442\u0435\u043d\u0442\u044b . None subscribe_id Optional[int] \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0438\u043d\u0442\u0435\u043d\u0442\u0430\u043c\u0438. None expire_ttl Optional[int] ???. None silent Optional[bool] ???. None Returns: Type Description MessagesSendResponse \u041e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","title":"answer()"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.callback_answer","text":"\u041e\u0442\u0432\u0435\u0442 \u043d\u0430 \u043d\u0430\u0436\u0430\u0442\u0438\u0435 callback \u043a\u043d\u043e\u043f\u043a\u0438. Parameters: Name Type Description Default event_data Dict[str, str] \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u0434\u043b\u044f \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 callback required Exceptions: Type Description RuntimeError \u0415\u0441\u043b\u0438 \u0432\u044b\u0437\u0432\u0430\u043d, \u043a\u043e\u0433\u0434\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0435 MessageEvent \u0442\u0438\u043f\u0430. Returns: Type Description BaseOkResponse \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430","title":"callback_answer()"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.edit","text":"\u0428\u043e\u0440\u0442\u043a\u0430\u0442 \u0434\u043b\u044f \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441\u0432\u043e\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. Parameters: Name Type Description Default message Optional[str] \u0422\u0435\u043a\u0441\u0442. None lat Optional[int] \u0428\u0438\u0440\u043e\u0442\u0430. None long Optional[int] \u0414\u043e\u043b\u0433\u043e\u0442\u0430. None attachment Optional[str] \u0412\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u043f\u044f\u0442\u043e\u0439). None keep_forward_messages Optional[BaseBoolInt] \u2014 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u043d\u044b\u0435 \u043f\u0435\u0440\u0435\u0441\u043b\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None keep_snippets Optional[BaseBoolInt] 1 \u2014 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u044c \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u0435\u043d\u043d\u044b\u0435 \u0432\u043d\u0435\u0448\u043d\u0438\u0435 \u0441\u0441\u044b\u043b\u043a\u0438 (\u0441\u043d\u0438\u043f\u043f\u0435\u0442\u044b). None group_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b. None dont_parse_links Optional[bool] 1 \u2014 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043d\u0438\u043f\u043f\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u0438\u0437 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None disable_mentions Optional[bool] 1 \u2014 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0438 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438. None message_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None conversation_message_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u0431\u0435\u0441\u0435\u0434\u0435. None template Optional[str] \u0428\u0430\u0431\u043b\u043e\u043d. None keyboard Optional[str] \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430. None Returns: Type Description MessagesEditResponse \u041e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","title":"edit()"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.get_user","text":"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f Returns: Type Description Union[\"UsersUser\", dict] \u041e\u0431\u044a\u0435\u043a\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","title":"get_user()"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.reply","text":"\u0428\u043e\u0440\u0442\u043a\u0430\u0442 \u0434\u043b\u044f \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0438 \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044e, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u043f\u0440\u0438\u0448\u043b\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u0435 Parameters: Name Type Description Default message Optional[str] \u0422\u0435\u043a\u0441\u0442. None domain Optional[str] \u041a\u043e\u0440\u043e\u0442\u043a\u0430\u044f \u0441\u0441\u044b\u043b\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f. None lat Optional[int] \u0428\u0438\u0440\u043e\u0442\u0430. None long Optional[int] \u0414\u043e\u043b\u0433\u043e\u0442\u0430. None attachment Optional[str] \u0412\u043b\u043e\u0436\u0435\u043d\u0438\u044f (\u0441\u0442\u0440\u043e\u043a\u0430 \u0441 \u0438\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440\u0430\u043c\u0438, \u0440\u0430\u0437\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u043c\u0438 \u0437\u0430\u043f\u044f\u0442\u043e\u0439). None sticker_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u0440\u0438\u043a\u0440\u0435\u043f\u043b\u044f\u0435\u043c\u043e\u0433\u043e \u0441\u0442\u0438\u043a\u0435\u0440\u0430. None group_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b. None keyboard Optional[str] \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430. None template Optional[str] \u0428\u0430\u0431\u043b\u043e\u043d (\u043a\u0430\u0440\u0443\u0441\u0435\u043b\u044c, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440). None payload Optional[str] Payload. None content_source Optional[str] \u0418\u0441\u0442\u043e\u0447\u043d\u0438\u043a \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u043a\u043e\u043d\u0442\u0435\u043d\u0442\u0430 . None dont_parse_links Optional[bool] 1 \u2014 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u043d\u0438\u043f\u043f\u0435\u0442 \u0441\u0441\u044b\u043b\u043a\u0438 \u0438\u0437 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. None disable_mentions Optional[bool] 1 \u2014 \u043e\u0442\u043a\u043b\u044e\u0447\u0438\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0443\u043f\u043e\u043c\u0438\u043d\u0430\u043d\u0438\u0439. None intent Optional[str] \u0421\u0442\u0440\u043e\u043a\u0430, \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u044e\u0449\u0430\u044f \u0438\u043d\u0442\u0435\u043d\u0442\u044b . None subscribe_id Optional[int] \u0447\u0438\u0441\u043b\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c \u0431\u0443\u0434\u0435\u0442 \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043e \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0438\u043d\u0442\u0435\u043d\u0442\u0430\u043c\u0438. None expire_ttl Optional[int] ???. None silent Optional[bool] ???. None json_serialize JSONEncoder \u0441\u0435\u0440\u0438\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f. <function dumps at 0x00000256D4FD4DC0> Returns: Type Description MessagesSendResponse MessagesSendResponse - \u041e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430","title":"reply()"},{"location":"getting_started/events/#vkwave.bots.addons.easy.easy_handlers.SimpleBotEvent.set_activity","text":"\u0418\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u0441\u0442\u0430\u0442\u0443\u0441\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438 Parameters: Name Type Description Default type Optional[str] \u0422\u0438\u043f \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442\u0438. ( typing \u2014 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0447\u0430\u043b \u043d\u0430\u0431\u0438\u0440\u0430\u0442\u044c \u0442\u0435\u043a\u0441\u0442, audiomessage \u2014 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0433\u043e\u043b\u043e\u0441\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435) None user_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f-\u043f\u043e\u043b\u0443\u0447\u0430\u0442\u0435\u043b\u044f. None group_id Optional[int] \u0418\u0434\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0442\u043e\u0440 \u0433\u0440\u0443\u043f\u043f\u044b. None Returns: Type Description MessagesSendResponse \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u0437\u0430\u043f\u0440\u043e\u0441\u0430.","title":"set_activity()"},{"location":"getting_started/","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u00b6 \u0412 \u044d\u0442\u043e\u0439 \u0433\u043b\u0430\u0432\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e \u043d\u0430\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u043e\u0441\u0432\u043e\u0438\u0442\u044c VkWave \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u00b6 \u042d\u0445\u043e-\u0431\u043e\u0442 \u0421\u043e\u0431\u044b\u0442\u0438\u044f \u0424\u0438\u043b\u044c\u0442\u0440\u044b \u041c\u0443\u043b\u044c\u0442\u0438\u0442\u043e\u043a\u0435\u043d \u0411\u043e\u0442\u044b-\u043a\u043b\u043e\u043d\u044b \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"getting_started/#_1","text":"\u0412 \u044d\u0442\u043e\u0439 \u0433\u043b\u0430\u0432\u0435 \u0441\u043e\u0431\u0440\u0430\u043d\u044b \u043f\u0440\u0438\u043c\u0435\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e \u043d\u0430\u0440\u0430\u0441\u0442\u0430\u044e\u0449\u0435\u0439 \u0441\u043b\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e\u043c\u043e\u0433\u0443\u0442 \u043e\u0441\u0432\u043e\u0438\u0442\u044c VkWave","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"getting_started/#_2","text":"\u042d\u0445\u043e-\u0431\u043e\u0442 \u0421\u043e\u0431\u044b\u0442\u0438\u044f \u0424\u0438\u043b\u044c\u0442\u0440\u044b \u041c\u0443\u043b\u044c\u0442\u0438\u0442\u043e\u043a\u0435\u043d \u0411\u043e\u0442\u044b-\u043a\u043b\u043e\u043d\u044b \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0428\u0430\u0431\u043b\u043e\u043d\u044b \u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435"},{"location":"getting_started/keyboards/","text":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u00b6 \u0414\u043b\u044f \u0443\u0434\u043e\u0431\u043d\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441 Keyboard \u0438\u0437 vkwave.bots.utils.keyboards \u0422\u0438\u043f\u044b \u043a\u043d\u043e\u043f\u043e\u043a \u00b6 VkWave \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0438\u043f\u044b \u043a\u043d\u043e\u043f\u043e\u043a, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0432 \u0412\u041a. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0422\u0438\u043f \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f Text add_text_button() Link add_link_button() Location add_location_button() Vk Pay add_vkpay_button() Vk App add_vkapps_button() Callback add_callback_button() \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u0435\u0439\u0430\u0443\u0442\u0430 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u00b6 \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u044d\u0442\u043e \u0441\u0435\u0442\u043a\u0430, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432 \u043e\u0431\u044b\u0447\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 5 \u00d7 10 \u043a\u043d\u043e\u043f\u043e\u043a, \u0432 \u0438\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0436\u0438\u043c\u0435 (\u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0432 \u0440\u0430\u043c\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f) \u2013 5 \u00d7 6 \u043a\u043d\u043e\u043f\u043e\u043a. Keyboard \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0442\u043e, \u043a\u0430\u043a \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 one_time \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0438\u0441\u0447\u0435\u0437\u043d\u0435\u0442 \u043f\u043e\u0441\u043b\u0435 \u043d\u0430\u0436\u0430\u0442\u0438\u044f \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 inline \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0443 \u0432 \u0438\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0436\u0438\u043c\u0435 \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0435 \u0432\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 keyboard . add_row () Payload (\u043f\u043e\u043b\u0435\u0437\u043d\u0430\u044f \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430) \u00b6 \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043a\u0440\u044b\u0442\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043d\u0430 \u043b\u044e\u0431\u0443\u044e \u043a\u043d\u043e\u043f\u043a\u0443. \u042d\u0442\u043e \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 JSON, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u043d\u0438\u0431\u0443\u0434\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u043e\u0442\u0430. from vkwave.bots.utils.keyboards.keyboard import Keyboard keyboard = Keyboard () kb . add_text_button ( \"\u0421\u0438\u043d\u044f\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , payload = { \"button\" : \"test\" }) \u041e \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0432 JSON \u043f\u043e\u0437\u0430\u0431\u043e\u0442\u0438\u0442\u0441\u044f VkWave \u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0446\u0432\u0435\u0442\u0430 \u043a\u043d\u043e\u043f\u043a\u0438 \u00b6 \u041a\u043d\u043e\u043f\u043a\u0438 \u0442\u0438\u043f\u0430 Text \u0438 Callback \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u0440\u0430\u0441\u0438\u0442\u044c. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 ButtonColor \u0438\u0437 vkwave.bots.utils.keyboards.keyboard kb . add_text_button ( \"\u0421\u0438\u043d\u044f\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , color = ButtonColor . PRIMARY ) kb . add_text_button ( \"\u0411\u0435\u043b\u0430\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , color = ButtonColor . SECONDARY ) kb . add_text_button ( \"\u041a\u0440\u0430\u0441\u043d\u0430\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , color = ButtonColor . NEGATIVE ) kb . add_text_button ( \"\u0417\u0435\u043b\u0451\u043d\u0430\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , color = ButtonColor . POSITIVE ) \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u0441\u0435 \u043a\u043d\u043e\u043f\u043a\u0438 \u0441\u0438\u043d\u0438\u0435 ( ButtonColor.PRIMARY ) \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u00b6 \u0412\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u043b\u044e\u0431\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0443\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c keyboard, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0439\u0442\u0435 JSON \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439. \u041e\u043d \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c keyboard.get_keyboard() await event . answer ( \"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439\" , keyboard = keyboard . get_keyboard ())","title":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"},{"location":"getting_started/keyboards/#_1","text":"\u0414\u043b\u044f \u0443\u0434\u043e\u0431\u043d\u043e\u0439 \u0433\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u0438 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043a\u043b\u0430\u0441\u0441 Keyboard \u0438\u0437 vkwave.bots.utils.keyboards","title":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"},{"location":"getting_started/keyboards/#_2","text":"VkWave \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u0442\u0438\u043f\u044b \u043a\u043d\u043e\u043f\u043e\u043a, \u0434\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0432 \u0412\u041a. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0422\u0438\u043f \u041c\u0435\u0442\u043e\u0434 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f Text add_text_button() Link add_link_button() Location add_location_button() Vk Pay add_vkpay_button() Vk App add_vkapps_button() Callback add_callback_button()","title":"\u0422\u0438\u043f\u044b \u043a\u043d\u043e\u043f\u043e\u043a"},{"location":"getting_started/keyboards/#_3","text":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u044d\u0442\u043e \u0441\u0435\u0442\u043a\u0430, \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 \u0440\u0430\u0437\u043c\u0435\u0440 \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432 \u043e\u0431\u044b\u0447\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 5 \u00d7 10 \u043a\u043d\u043e\u043f\u043e\u043a, \u0432 \u0438\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0436\u0438\u043c\u0435 (\u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0432 \u0440\u0430\u043c\u043a\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f) \u2013 5 \u00d7 6 \u043a\u043d\u043e\u043f\u043e\u043a. Keyboard \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u0432, \u043d\u0430\u0441\u0442\u0440\u0430\u0438\u0432\u0430\u044e\u0449\u0438\u0445 \u0442\u043e, \u043a\u0430\u043a \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u0433\u043b\u044f\u0434\u0435\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430. \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 one_time \u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430 \u0438\u0441\u0447\u0435\u0437\u043d\u0435\u0442 \u043f\u043e\u0441\u043b\u0435 \u043d\u0430\u0436\u0430\u0442\u0438\u044f \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 inline \u041e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0443 \u0432 \u0438\u043d\u043b\u0430\u0439\u043d-\u0440\u0435\u0436\u0438\u043c\u0435 \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043d\u043e\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 \u0432 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0435 \u0432\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u043c\u0435\u0442\u043e\u0434 keyboard . add_row ()","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u043b\u0435\u0439\u0430\u0443\u0442\u0430 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"},{"location":"getting_started/keyboards/#payload","text":"\u041a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043a\u0440\u044b\u0442\u043e\u0439 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043f\u043e \u043d\u0430\u0436\u0430\u0442\u0438\u044e \u043d\u0430 \u043b\u044e\u0431\u0443\u044e \u043a\u043d\u043e\u043f\u043a\u0443. \u042d\u0442\u043e \u0437\u0430\u0440\u0430\u043d\u0435\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0451\u043d\u043d\u044b\u0439 JSON, \u043f\u043e \u043a\u043e\u0442\u043e\u0440\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u0438\u043b\u0438 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u043a\u0430\u043a\u0443\u044e-\u043d\u0438\u0431\u0443\u0434\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0448\u0430\u0433\u0438 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u043e\u0442\u0430. from vkwave.bots.utils.keyboards.keyboard import Keyboard keyboard = Keyboard () kb . add_text_button ( \"\u0421\u0438\u043d\u044f\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , payload = { \"button\" : \"test\" }) \u041e \u043a\u043e\u043d\u0432\u0435\u0440\u0442\u0430\u0446\u0438\u0438 \u0441\u043b\u043e\u0432\u0430\u0440\u044f \u0432 JSON \u043f\u043e\u0437\u0430\u0431\u043e\u0442\u0438\u0442\u0441\u044f VkWave","title":"Payload (\u043f\u043e\u043b\u0435\u0437\u043d\u0430\u044f \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430)"},{"location":"getting_started/keyboards/#_4","text":"\u041a\u043d\u043e\u043f\u043a\u0438 \u0442\u0438\u043f\u0430 Text \u0438 Callback \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u043a\u0440\u0430\u0441\u0438\u0442\u044c. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0434\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043f\u0435\u0440\u0435\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 ButtonColor \u0438\u0437 vkwave.bots.utils.keyboards.keyboard kb . add_text_button ( \"\u0421\u0438\u043d\u044f\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , color = ButtonColor . PRIMARY ) kb . add_text_button ( \"\u0411\u0435\u043b\u0430\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , color = ButtonColor . SECONDARY ) kb . add_text_button ( \"\u041a\u0440\u0430\u0441\u043d\u0430\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , color = ButtonColor . NEGATIVE ) kb . add_text_button ( \"\u0417\u0435\u043b\u0451\u043d\u0430\u044f \u043a\u043d\u043e\u043f\u043a\u0430\" , color = ButtonColor . POSITIVE ) \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432\u0441\u0435 \u043a\u043d\u043e\u043f\u043a\u0438 \u0441\u0438\u043d\u0438\u0435 ( ButtonColor.PRIMARY )","title":"\u041d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0430 \u0446\u0432\u0435\u0442\u0430 \u043a\u043d\u043e\u043f\u043a\u0438"},{"location":"getting_started/keyboards/#_5","text":"\u0412\u044b\u0437\u043e\u0432\u0438\u0442\u0435 \u043b\u044e\u0431\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0443\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u043e\u043c keyboard, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0439\u0442\u0435 JSON \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439. \u041e\u043d \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c keyboard.get_keyboard() await event . answer ( \"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u043e\u0439\" , keyboard = keyboard . get_keyboard ())","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b"},{"location":"getting_started/middleware/","text":"\u041c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c \u00b6 \u041c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c - \u044d\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043f\u0440\u043e\u0433\u043e\u043d\u043e\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c. \u041e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0431\u0440\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u043b\u0438\u0431\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0444\u0438\u043b\u044c\u0442\u0440 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0435. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u0438 \u00b6 \u041b\u044e\u0431\u0430\u044f \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c MiddlewareResult \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c True \u0438\u043b\u0438 False . \u0415\u0441\u043b\u0438 \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 MiddlewareResult(False) , \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0438 \u043d\u0435 \u0438\u0434\u0451\u0442 \u0434\u0430\u043b\u044c\u0448\u0435 \u043f\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c \u041e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u00b6 \u041c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c \u0438 \u0434\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430 ( pre_process_event , \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e) \u0438 \u043f\u043e\u0441\u043b\u0435 ( post_process_event ) from vkwave.bots import SimpleLongPollBot , MiddlewareResult , BaseMiddleware class UserShouldNotLoveDogs ( BaseMiddleware ): async def pre_process_event ( self , event : BotEvent ) -> MiddlewareResult : if event . object . object . message . text == \"dog\" : print ( f \" { event . object . object . message . from_id } loves dogs\" ) return MiddlewareResult ( False ) return MiddlewareResult ( True ) \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u00b6 \u041d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b (\u043a\u0440\u043e\u043c\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f) \u0432 \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c \u041d\u0435\u043b\u044c\u0437\u044f \u0441\u043e\u0437\u0434\u0430\u0442\u044c post_process_event from vkwave.bots import SimpleLongPollBot , MiddlewareResult @bot . middleware () async def check ( event : BotEvent ) -> MiddlewareResult : if event . object . object . message . text == \"dog\" : print ( f \" { event . object . object . message . from_id } loves dogs\" ) return MiddlewareResult ( False ) return MiddlewareResult ( True )","title":"\u041c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c"},{"location":"getting_started/middleware/#_1","text":"\u041c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c - \u044d\u0442\u043e \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u043f\u0435\u0440\u0435\u0434 \u043f\u0440\u043e\u0433\u043e\u043d\u043e\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043f\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c. \u041e\u043d\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u0430\u0431\u0440\u0430\u043a\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u043b\u0438\u0431\u043e \u043f\u0440\u0438\u0437\u043d\u0430\u043a\u0443 \u0431\u0435\u0437 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0434\u0438\u043d \u0438 \u0442\u043e\u0442 \u0436\u0435 \u0444\u0438\u043b\u044c\u0442\u0440 \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0435.","title":"\u041c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c"},{"location":"getting_started/middleware/#_2","text":"\u041b\u044e\u0431\u0430\u044f \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c \u0434\u043e\u043b\u0436\u043d\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c MiddlewareResult \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c True \u0438\u043b\u0438 False . \u0415\u0441\u043b\u0438 \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 MiddlewareResult(False) , \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u0438 \u043d\u0435 \u0438\u0434\u0451\u0442 \u0434\u0430\u043b\u044c\u0448\u0435 \u043f\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u0438"},{"location":"getting_started/middleware/#-","text":"\u041c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u041c\u043e\u0436\u043d\u043e \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c \u0438 \u0434\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0449\u0435\u0433\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430 ( pre_process_event , \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u043e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e) \u0438 \u043f\u043e\u0441\u043b\u0435 ( post_process_event ) from vkwave.bots import SimpleLongPollBot , MiddlewareResult , BaseMiddleware class UserShouldNotLoveDogs ( BaseMiddleware ): async def pre_process_event ( self , event : BotEvent ) -> MiddlewareResult : if event . object . object . message . text == \"dog\" : print ( f \" { event . object . object . message . from_id } loves dogs\" ) return MiddlewareResult ( False ) return MiddlewareResult ( True )","title":"\u041e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431"},{"location":"getting_started/middleware/#_3","text":"\u041d\u0435 \u043c\u043e\u0436\u0435\u0442 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b (\u043a\u0440\u043e\u043c\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f) \u0432 \u043c\u0438\u0434\u0434\u043b\u0432\u0430\u0440\u044c \u041d\u0435\u043b\u044c\u0437\u044f \u0441\u043e\u0437\u0434\u0430\u0442\u044c post_process_event from vkwave.bots import SimpleLongPollBot , MiddlewareResult @bot . middleware () async def check ( event : BotEvent ) -> MiddlewareResult : if event . object . object . message . text == \"dog\" : print ( f \" { event . object . object . message . from_id } loves dogs\" ) return MiddlewareResult ( False ) return MiddlewareResult ( True )","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431"},{"location":"getting_started/multitoken/","text":"\u041c\u0443\u043b\u044c\u0442\u0438\u0442\u043e\u043a\u0435\u043d \u00b6 \u0414\u043b\u044f \u043e\u0431\u0445\u043e\u0434\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a API \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0431\u043e\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432: bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 )","title":"\u041c\u0443\u043b\u044c\u0442\u0438\u0442\u043e\u043a\u0435\u043d"},{"location":"getting_started/multitoken/#_1","text":"\u0414\u043b\u044f \u043e\u0431\u0445\u043e\u0434\u0430 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0447\u0430\u0441\u0442\u043e\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u043a API \u0412\u041a\u043e\u043d\u0442\u0430\u043a\u0442\u0435 \u043f\u0440\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0438 \u0431\u043e\u0442\u0430 \u043c\u043e\u0436\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0442\u043e\u043a\u0435\u043d\u043e\u0432: bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 )","title":"\u041c\u0443\u043b\u044c\u0442\u0438\u0442\u043e\u043a\u0435\u043d"},{"location":"getting_started/routers/","text":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b \u00b6 \u0420\u043e\u0443\u0442\u0435\u0440\u044b - \u0441\u0430\u043c\u0430\u044f \u0432\u0430\u0436\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043b\u044e\u0431\u043e\u0433\u043e \u0431\u043e\u0442\u0430 \u0432 VkWave. \u0412 \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b, \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0438 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0439. \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u00b6 from vkwave.bots import DefaultRouter router = DefaultRouter () \u0420\u043e\u0443\u0442\u0435\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0438\u043b\u044c\u0442\u0440\u044b , \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u043d\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u044f \u0441\u043a\u0432\u043e\u0437\u044c \u0432\u0441\u0435 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b router = DefaultRouter ( SomeFilter ()) @bots . simple_bot_message_handler ( router , < \u0444\u0438\u043b\u044c\u0442\u0440\u044b > ) async def handler ( ans : bots . SimpleBotEvent ): await ans . answer ( \"\u041e\u0442\u0432\u0435\u0442\" , ) \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u00b6 from module import router bot = SimpleLongPollBot ( tokens = \"Token\" , group_id = 123 ) bot . dispatcher . add_router ( router )","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"getting_started/routers/#_1","text":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b - \u0441\u0430\u043c\u0430\u044f \u0432\u0430\u0436\u043d\u0430\u044f \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u044c \u043b\u044e\u0431\u043e\u0433\u043e \u0431\u043e\u0442\u0430 \u0432 VkWave. \u0412 \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b, \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0438 \u043e\u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u043e\u0431\u044b\u0442\u0438\u0439.","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"getting_started/routers/#_2","text":"from vkwave.bots import DefaultRouter router = DefaultRouter () \u0420\u043e\u0443\u0442\u0435\u0440\u044b \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043d\u0430 \u0432\u0445\u043e\u0434 \u0444\u0438\u043b\u044c\u0442\u0440\u044b , \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0441\u043e\u0431\u044b\u0442\u0438\u044f \u0431\u0443\u0434\u0443\u0442 \u043e\u0442\u0441\u0435\u0438\u0432\u0430\u0442\u044c\u0441\u044f \u0431\u044b\u0441\u0442\u0440\u0435\u0435, \u043d\u0435 \u043f\u0440\u043e\u0445\u043e\u0434\u044f \u0441\u043a\u0432\u043e\u0437\u044c \u0432\u0441\u0435 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b router = DefaultRouter ( SomeFilter ()) @bots . simple_bot_message_handler ( router , < \u0444\u0438\u043b\u044c\u0442\u0440\u044b > ) async def handler ( ans : bots . SimpleBotEvent ): await ans . answer ( \"\u041e\u0442\u0432\u0435\u0442\" , )","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435"},{"location":"getting_started/routers/#_3","text":"from module import router bot = SimpleLongPollBot ( tokens = \"Token\" , group_id = 123 ) bot . dispatcher . add_router ( router )","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"getting_started/templates/","text":"\u0428\u0430\u0431\u043b\u043e\u043d\u044b \u00b6 \u041a\u0430\u0440\u0443\u0441\u0435\u043b\u044c \u00b6 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u00b6 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \"\u041a\u0430\u0440\u0443\u0441\u0435\u043b\u044c\" \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u043c Template \u0438\u0437 vkwave.bots.utils.keyboards : from vkwave.bots.utils.keyboards import Template template_1 = Template ( title = \"First title\" , description = \"First description\" , photo_id = \"-191459391_457239025\" , ) template_1 . add_text_button ( \"Hello world!\" ) template_1 . add_text_button ( \"123\" ) template_2 = Template ( title = \"Second title\" , description = \"Second description\" , photo_id = \"-191459391_457239026\" , ) template_2 . add_text_button ( \"World hello!\" ) template_2 . add_text_button ( \"Wow, another button\" ) carousel = Template . generate_carousel ( template_1 , template_2 ) \u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430 \u00b6 \u0427\u0435\u0440\u0435\u0437 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 api \u00b6 api_session = API ( ... ) api = api_session . get_context () await api . messages . send ( user_id = 1 , random_id = 0 , template = carousel ) \u0427\u0435\u0440\u0435\u0437 API, \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432 event \u00b6 await event . api_ctx . messages . send ( user_id = 1 , random_id = 0 , template = carousel ) \u0427\u0435\u0440\u0435\u0437 answer (SimpleBot) \u00b6 await event . answer ( template = carousel )","title":"\u0428\u0430\u0431\u043b\u043e\u043d\u044b"},{"location":"getting_started/templates/#_1","text":"","title":"\u0428\u0430\u0431\u043b\u043e\u043d\u044b"},{"location":"getting_started/templates/#_2","text":"","title":"\u041a\u0430\u0440\u0443\u0441\u0435\u043b\u044c"},{"location":"getting_started/templates/#_3","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0448\u0430\u0431\u043b\u043e\u043d\u0430 \"\u041a\u0430\u0440\u0443\u0441\u0435\u043b\u044c\" \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043b\u0430\u0441\u0441\u043e\u043c Template \u0438\u0437 vkwave.bots.utils.keyboards : from vkwave.bots.utils.keyboards import Template template_1 = Template ( title = \"First title\" , description = \"First description\" , photo_id = \"-191459391_457239025\" , ) template_1 . add_text_button ( \"Hello world!\" ) template_1 . add_text_button ( \"123\" ) template_2 = Template ( title = \"Second title\" , description = \"Second description\" , photo_id = \"-191459391_457239026\" , ) template_2 . add_text_button ( \"World hello!\" ) template_2 . add_text_button ( \"Wow, another button\" ) carousel = Template . generate_carousel ( template_1 , template_2 )","title":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435"},{"location":"getting_started/templates/#_4","text":"","title":"\u041e\u0442\u043f\u0440\u0430\u0432\u043a\u0430"},{"location":"getting_started/templates/#api","text":"api_session = API ( ... ) api = api_session . get_context () await api . messages . send ( user_id = 1 , random_id = 0 , template = carousel )","title":"\u0427\u0435\u0440\u0435\u0437 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442 api"},{"location":"getting_started/templates/#api-event","text":"await event . api_ctx . messages . send ( user_id = 1 , random_id = 0 , template = carousel )","title":"\u0427\u0435\u0440\u0435\u0437 API, \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0439 \u0432 event"},{"location":"getting_started/templates/#answer-simplebot","text":"await event . answer ( template = carousel )","title":"\u0427\u0435\u0440\u0435\u0437 answer (SimpleBot)"},{"location":"getting_started/uploaders/","text":"\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u00b6 \u041a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 BaseUploader : \u041c\u0435\u0442\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 get_attachment_from_io \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435-\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u0430\u0439\u0442 get_attachment_from_path \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0434\u0438\u0441\u043a\u0430 get_attachments_from_paths \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u0434\u0438\u0441\u043a\u0430 get_attachment_from_link \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 get_attachments_from_links \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c \u0412 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00b6 \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u00b6 from vkwave.api import API from vkwave.bots.utils.uploaders import PhotoUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) uploader = PhotoUploader ( api . get_context ()) async def main (): big_attachment = await uploader . get_attachments_from_paths ( peer_id = 578716413 , file_paths = [ \"photo.jpg\" , \"photo.jpg\" , \"photo.jpg\" ], ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = big_attachment , random_id = 0 ) \u0413\u043e\u043b\u043e\u0441\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u00b6 from vkwave.api import API from vkwave.bots.utils.uploaders import VoiceUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) uploader = VoiceUploader ( api . get_context ()) audio_message = await uploader . get_attachment_from_path ( peer_id = 578716413 , file_path = \"audio.ogg\" , ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = audio_message , random_id = 0 ) \u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b \u00b6 from vkwave.api import API from vkwave.bots.utils.uploaders import DocUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) doc = await DocUploader ( api . get_context ()) . get_attachment_from_link ( peer_id = 123 , link = \"https://user-images.githubusercontent.com/28061158/74590410-239e3300-501f-11ea-9774-27ee507a1e1e.jpg\" , title = \"my document title\" ) await api . get_context () . messages . send ( user_id = 1234 , attachment = doc , random_id = 0 ) \u041d\u0430 \u0441\u0442\u0435\u043d\u0443 \u00b6 \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u00b6 from vkwave.api import API from vkwave.bots.utils.uploaders import WallPhotoUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) photo = await WallPhotoUploader ( api . get_context ()) . get_attachment_from_link ( group_id =- 191949777 , link = \"https://user-images.githubusercontent.com/28061158/74590410-239e3300-501f-11ea-9774-27ee507a1e1e.jpg\" , ) await api . get_context () . wall . post ( owner_id =- 191949777 , attachments = photo )","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439"},{"location":"getting_started/uploaders/#_1","text":"\u041a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441 BaseUploader : \u041c\u0435\u0442\u043e\u0434 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 get_attachment_from_io \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435-\u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u0431\u0430\u0439\u0442 get_attachment_from_path \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u0434\u0438\u0441\u043a\u0430 get_attachments_from_paths \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0441 \u0434\u0438\u0441\u043a\u0430 get_attachment_from_link \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0435 get_attachments_from_links \u0417\u0430\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u043f\u043e \u0441\u0441\u044b\u043b\u043a\u0430\u043c","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u0447\u0438\u043a\u0438 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439"},{"location":"getting_started/uploaders/#_2","text":"","title":"\u0412 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435"},{"location":"getting_started/uploaders/#_3","text":"from vkwave.api import API from vkwave.bots.utils.uploaders import PhotoUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) uploader = PhotoUploader ( api . get_context ()) async def main (): big_attachment = await uploader . get_attachments_from_paths ( peer_id = 578716413 , file_paths = [ \"photo.jpg\" , \"photo.jpg\" , \"photo.jpg\" ], ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = big_attachment , random_id = 0 )","title":"\u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f"},{"location":"getting_started/uploaders/#_4","text":"from vkwave.api import API from vkwave.bots.utils.uploaders import VoiceUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) uploader = VoiceUploader ( api . get_context ()) audio_message = await uploader . get_attachment_from_path ( peer_id = 578716413 , file_path = \"audio.ogg\" , ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = audio_message , random_id = 0 )","title":"\u0413\u043e\u043b\u043e\u0441\u043e\u0432\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f"},{"location":"getting_started/uploaders/#_5","text":"from vkwave.api import API from vkwave.bots.utils.uploaders import DocUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) doc = await DocUploader ( api . get_context ()) . get_attachment_from_link ( peer_id = 123 , link = \"https://user-images.githubusercontent.com/28061158/74590410-239e3300-501f-11ea-9774-27ee507a1e1e.jpg\" , title = \"my document title\" ) await api . get_context () . messages . send ( user_id = 1234 , attachment = doc , random_id = 0 )","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u044b"},{"location":"getting_started/uploaders/#_6","text":"\u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u0442\u043e\u043a\u0435\u043d\u043e\u043c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f","title":"\u041d\u0430 \u0441\u0442\u0435\u043d\u0443"},{"location":"getting_started/uploaders/#_7","text":"from vkwave.api import API from vkwave.bots.utils.uploaders import WallPhotoUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) photo = await WallPhotoUploader ( api . get_context ()) . get_attachment_from_link ( group_id =- 191949777 , link = \"https://user-images.githubusercontent.com/28061158/74590410-239e3300-501f-11ea-9774-27ee507a1e1e.jpg\" , ) await api . get_context () . wall . post ( owner_id =- 191949777 , attachments = photo )","title":"\u0418\u0437\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f"},{"location":"getting_started/filters/builtin/","text":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u00b6 \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 VkWave \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a from vkwave.bots.core.dispatching import filters : EventTypeFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u0438\u043f\u0443 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u043b \u043f\u0438\u0441\u0430\u0442\u044c \u0435\u043c\u0443 \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0431\u043e\u0442\u0430 \u0438 \u043f\u0440. \u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0412\u041a ) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439... @bot . handler ( filters . EventTypeFilter ( \"message_allow\" )) def only_allows ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 TextFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u043f\u0440\u0438\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c hi @bot . message_handler ( filters . TextFilter ( \"hi\" )) def only_hi_in_text ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 \u041c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a, \u0442\u043e\u0433\u0434\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u043a\u043e\u0433\u0434\u0430 \u0445\u043e\u0442\u044f \u0431\u044b \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0430\u0441\u044c \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c hi \u0438\u043b\u0438 hello \u0438\u043b\u0438 \u043f\u0440\u0438\u0432\u0435\u0442 \u0438\u043b\u0438 \u043a\u0443 @bot . message_handler ( filters . TextFilter ([ \"hi\" , \"hello\" , \"\u043f\u0440\u0438\u0432\u0435\u0442\" , \"\u043a\u0443\" ])) def only_greetings_in_text ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 PayloadFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e payload`\u0443 (\u043f\u043e\u043b\u0435\u0437\u043d\u0430\u044f \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430) \u043f\u0440\u0438\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0421\u043a\u0440\u044b\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u0445 ) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043f\u0435\u0439\u043b\u043e\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0432\u0435\u043d {\"button\": \"start\"} @bot . message_handler ( filters . PayloadFilter ({ \"button\" : \"start\" })) def only_start_button_pressed ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 ChatActionFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044e \u0432 \u0431\u0435\u0441\u0435\u0434\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u043e\u0432\u044b\u0439 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a \u0431\u0435\u0441\u0435\u0434\u044b. \u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0431\u0435\u0441\u0435\u0434\u044b \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043f\u043e\u043b\u044f action ) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0435\u0441\u0435\u0434\u044b @bot . message_handler ( filters . ChatActionFilter ( \"chat_invite_user\" )) def only_new_user_invited ( event : SimpleBotEvent ): event . ans ( \"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 CommandsFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 ! \u0438\u043b\u0438 / , \u043d\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c, \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 prefixes \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 `/hello` \u0438\u043b\u0438 `!hello` @bot . message_handler ( filters . CommandsFilter ( \"hello\" )) def only_new_user_invited ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 RegexFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u043e \u0441\u043b\u043e\u0432\u043e\u043c, \u043f\u0435\u0440\u0432\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e `\u043f`, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f `\u0442` @bot . message_handler ( filters . RegexFilter ( r \"^\u043f\\w*\u0442$\" )) def only_matched_by_regex ( event : SimpleBotEvent ): event . ans ( \"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0435!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 MessageFromConversationTypeFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u0438\u043f\u0443 \u0434\u0438\u0430\u043b\u043e\u0433\u0430, \u043e\u0442\u043a\u0443\u0434\u0430 \u043f\u0440\u0438\u0448\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432: \u041b\u0438\u0447\u043d\u044b\u0435 \u0411\u0435\u0441\u0435\u0434\u044b from_pm , from_dm , from_direct from_chat , chat # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043e\u043a \u0431\u043e\u0442\u0430 @bot . message_handler ( filters . MessageFromConversationTypeFilter ( \"from_pm\" )) def only_private_messages ( event : SimpleBotEvent ): event . ans ( \"\u041d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0447\u0430\u0442\u0430!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 FromMeFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0431\u043e\u0442 \u0438\u043b\u0438 \u0435\u0433\u043e \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043d\u0438\u043a). \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432. # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0431\u043e\u0442\u0430 @bot . message_handler ( filters . FromMeFilter ( True ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u041d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043c\u0435\u043d\u044f\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 MessageArgsFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0418\u043c\u0435\u0435\u0442 \u0434\u0432\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430: \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 args_count \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 command_length \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"/start arg1 arg2\") @bot . message_handler ( filters . MessageArgsFilter ( args_count = 2 )) def only_with_two_args ( event : SimpleBotEvent ): event . ans ( \"\u0412 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430: {0} !\" . format ( event [ 'args' ])) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 FwdMessagesFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u0435\u0440\u0435\u0441\u043b\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0440\u0435\u0430\u0433\u0438\u0440\u0443\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0431\u043e\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0435\u043c\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f @bot . message_handler ( filters . FwdMessagesFilter () def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0435\u0440\u0435\u0441\u043b\u0430\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 ReplyMessageFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0431\u043e\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 @bot . message_handler ( filters . ReplyMessageFilter ( True ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u0415\u0441\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 TextStartswithFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u043e\u043c\u0443, \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043b\u0438 \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 (\u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a, \u0442\u043e\u0433\u0434\u0430 \u0444\u0438\u043b\u044c\u0442\u0440 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0430) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043d\u0430 \"\u043f\u0440\u0438\u0432\u0435\" @bot . message_handler ( filters . TextStartsWithFilter ( \"\u043f\u0440\u0438\u0432\u0435\" ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 PayloadContainsFilter \u00b6 \u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043a\u043b\u044e\u0447\u0430 \u0432 \u043f\u0435\u0439\u043b\u043e\u0430\u0434\u0435 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0432 \u043f\u0435\u0439\u043b\u043e\u0430\u0434\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043a\u043b\u044e\u0447 button @bot . message_handler ( filters . PayloadContainsFilter ( \"button\" ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u041d\u0430\u0436\u0430\u0442\u0430 \u043a\u043d\u043e\u043f\u043a\u0430 \u0441 \u043f\u0435\u0439\u043b\u043e\u0430\u0434\u043e\u043c button!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"getting_started/filters/builtin/#_1","text":"\u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u0432 VkWave \u0435\u0441\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u043a\u0430\u043a from vkwave.bots.core.dispatching import filters :","title":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"getting_started/filters/builtin/#eventtypefilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u0438\u043f\u0443 \u0441\u043e\u0431\u044b\u0442\u0438\u044f (\u043d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u043b \u043f\u0438\u0441\u0430\u0442\u044c \u0435\u043c\u0443 \u043e\u0442 \u0438\u043c\u0435\u043d\u0438 \u0431\u043e\u0442\u0430 \u0438 \u043f\u0440. \u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 \u0412\u041a ) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0440\u0430\u0437\u0440\u0435\u0448\u0435\u043d\u0438\u044f \u043d\u0430 \u043e\u0442\u043f\u0440\u0430\u0432\u043a\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439... @bot . handler ( filters . EventTypeFilter ( \"message_allow\" )) def only_allows ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"EventTypeFilter"},{"location":"getting_started/filters/builtin/#textfilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u043f\u0440\u0438\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c hi @bot . message_handler ( filters . TextFilter ( \"hi\" )) def only_hi_in_text ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 \u041c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0441\u0442\u0440\u043e\u043a, \u0442\u043e\u0433\u0434\u0430 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u043a\u043e\u0433\u0434\u0430 \u0445\u043e\u0442\u044f \u0431\u044b \u0441\u0442\u0440\u043e\u043a\u0430 \u0438\u0437 \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u0441\u0442\u0440\u0435\u0442\u0438\u043b\u0430\u0441\u044c \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c hi \u0438\u043b\u0438 hello \u0438\u043b\u0438 \u043f\u0440\u0438\u0432\u0435\u0442 \u0438\u043b\u0438 \u043a\u0443 @bot . message_handler ( filters . TextFilter ([ \"hi\" , \"hello\" , \"\u043f\u0440\u0438\u0432\u0435\u0442\" , \"\u043a\u0443\" ])) def only_greetings_in_text ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"TextFilter"},{"location":"getting_started/filters/builtin/#payloadfilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e payload`\u0443 (\u043f\u043e\u043b\u0435\u0437\u043d\u0430\u044f \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u0430) \u043f\u0440\u0438\u0448\u0435\u0434\u0448\u0435\u0433\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0421\u043a\u0440\u044b\u0442\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u0445\u043e\u0434\u0438\u0442, \u043a\u043e\u0433\u0434\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u043d\u0430\u0436\u0438\u043c\u0430\u0435\u0442 \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u043e\u0439 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u0435\u0435 \u043e \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u0430\u0445 ) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043f\u0435\u0439\u043b\u043e\u0430\u0434 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0440\u0430\u0432\u0435\u043d {\"button\": \"start\"} @bot . message_handler ( filters . PayloadFilter ({ \"button\" : \"start\" })) def only_start_button_pressed ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"PayloadFilter"},{"location":"getting_started/filters/builtin/#chatactionfilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0441\u043e\u0431\u044b\u0442\u0438\u044e \u0432 \u0431\u0435\u0441\u0435\u0434\u0435 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u043d\u043e\u0432\u044b\u0439 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a \u0431\u0435\u0441\u0435\u0434\u044b. \u041f\u043e\u043b\u043d\u044b\u0439 \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0431\u044b\u0442\u0438\u0439 \u0431\u0435\u0441\u0435\u0434\u044b \u0432 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u043f\u043e\u043b\u044f action ) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u043f\u0440\u0438\u0433\u043b\u0430\u0448\u0435\u043d\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u0443\u0447\u0430\u0441\u0442\u043d\u0438\u043a\u043e\u0432 \u0431\u0435\u0441\u0435\u0434\u044b @bot . message_handler ( filters . ChatActionFilter ( \"chat_invite_user\" )) def only_new_user_invited ( event : SimpleBotEvent ): event . ans ( \"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"ChatActionFilter"},{"location":"getting_started/filters/builtin/#commandsfilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043a\u043e\u043c\u0430\u043d\u0434 \u0432 \u0442\u0435\u043a\u0441\u0442\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 \u0441\u0447\u0438\u0442\u0430\u044e\u0442\u0441\u044f \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u0441 ! \u0438\u043b\u0438 / , \u043d\u043e \u044d\u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u0441\u0442\u0440\u043e\u0438\u0442\u044c, \u043f\u0435\u0440\u0435\u0434\u0430\u0432 \u0444\u0438\u043b\u044c\u0442\u0440\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 prefixes \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438\u043b\u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u043a\u043e\u043c\u0430\u043d\u0434\u043e\u0439 `/hello` \u0438\u043b\u0438 `!hello` @bot . message_handler ( filters . CommandsFilter ( \"hello\" )) def only_new_user_invited ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"CommandsFilter"},{"location":"getting_started/filters/builtin/#regexfilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u0435\u043a\u0441\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0439) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441\u043e \u0441\u043b\u043e\u0432\u043e\u043c, \u043f\u0435\u0440\u0432\u0430\u044f \u0431\u0443\u043a\u0432\u0430 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e `\u043f`, \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f `\u0442` @bot . message_handler ( filters . RegexFilter ( r \"^\u043f\\w*\u0442$\" )) def only_matched_by_regex ( event : SimpleBotEvent ): event . ans ( \"\u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0440\u0435\u0433\u0443\u043b\u044f\u0440\u043a\u0435!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"RegexFilter"},{"location":"getting_started/filters/builtin/#messagefromconversationtypefilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u0438\u043f\u0443 \u0434\u0438\u0430\u043b\u043e\u0433\u0430, \u043e\u0442\u043a\u0443\u0434\u0430 \u043f\u0440\u0438\u0448\u043b\u043e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0414\u043e\u0441\u0442\u0443\u043f\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0438\u0430\u043b\u043e\u0433\u043e\u0432: \u041b\u0438\u0447\u043d\u044b\u0435 \u0411\u0435\u0441\u0435\u0434\u044b from_pm , from_dm , from_direct from_chat , chat # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0435\u0440\u0435\u043f\u0438\u0441\u043e\u043a \u0431\u043e\u0442\u0430 @bot . message_handler ( filters . MessageFromConversationTypeFilter ( \"from_pm\" )) def only_private_messages ( event : SimpleBotEvent ): event . ans ( \"\u041d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0438\u0437 \u043b\u0438\u0447\u043d\u043e\u0433\u043e \u0447\u0430\u0442\u0430!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"MessageFromConversationTypeFilter"},{"location":"getting_started/filters/builtin/#frommefilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044e \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f (\u0431\u043e\u0442 \u0438\u043b\u0438 \u0435\u0433\u043e \u0441\u043e\u0431\u0435\u0441\u0435\u0434\u043d\u0438\u043a). \u0420\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432. # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0431\u043e\u0442\u0430 @bot . message_handler ( filters . FromMeFilter ( True ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u041d\u043e\u0432\u043e\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u043e\u0442 \u043c\u0435\u043d\u044f\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"FromMeFilter"},{"location":"getting_started/filters/builtin/#messageargsfilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 \u0418\u043c\u0435\u0435\u0442 \u0434\u0432\u0430 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430: \u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 args_count \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 command_length \u041a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u043b\u043e\u0432 \u0432 \u043a\u043e\u043c\u0430\u043d\u0434\u0435 # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \"/start arg1 arg2\") @bot . message_handler ( filters . MessageArgsFilter ( args_count = 2 )) def only_with_two_args ( event : SimpleBotEvent ): event . ans ( \"\u0412 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430: {0} !\" . format ( event [ 'args' ])) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"MessageArgsFilter"},{"location":"getting_started/filters/builtin/#fwdmessagesfilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043f\u0435\u0440\u0435\u0441\u043b\u0430\u043d\u043d\u044b\u0445 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u0415\u0441\u043b\u0438 \u0447\u0438\u0441\u043b\u043e \u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e, \u0440\u0435\u0430\u0433\u0438\u0440\u0443\u0435\u0442 \u043d\u0430 \u043b\u044e\u0431\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0431\u043e\u0442\u0430, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0441\u044b\u043b\u0430\u0435\u043c\u044b\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f @bot . message_handler ( filters . FwdMessagesFilter () def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0435\u0440\u0435\u0441\u043b\u0430\u043b\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"FwdMessagesFilter"},{"location":"getting_started/filters/builtin/#replymessagefilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043e\u0442\u0432\u0435\u0442\u0430 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u0431\u043e\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 @bot . message_handler ( filters . ReplyMessageFilter ( True ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u0415\u0441\u0442\u044c \u043e\u0442\u0432\u0435\u0442 \u043d\u0430 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"ReplyMessageFilter"},{"location":"getting_started/filters/builtin/#textstartswithfilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u0442\u043e\u043c\u0443, \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u043b\u0438 \u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0438 (\u043c\u043e\u0436\u0435\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0441\u043f\u0438\u0441\u043e\u043a, \u0442\u043e\u0433\u0434\u0430 \u0444\u0438\u043b\u044c\u0442\u0440 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442, \u0435\u0441\u043b\u0438 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u043d\u0430 \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u043b\u0430) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u043d\u0430\u0447\u0438\u043d\u0430\u044e\u0449\u0438\u0435\u0441\u044f \u043d\u0430 \"\u043f\u0440\u0438\u0432\u0435\" @bot . message_handler ( filters . TextStartsWithFilter ( \"\u043f\u0440\u0438\u0432\u0435\" ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"TextStartswithFilter"},{"location":"getting_started/filters/builtin/#payloadcontainsfilter","text":"\u041e\u0442\u0441\u0435\u0438\u0432\u0430\u0435\u0442 \u043f\u043e \u043d\u0430\u043b\u0438\u0447\u0438\u044e \u043a\u043b\u044e\u0447\u0430 \u0432 \u043f\u0435\u0439\u043b\u043e\u0430\u0434\u0435 (\u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u044d\u0442\u043e\u043c \u043d\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442\u0441\u044f) # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, \u0432 \u043f\u0435\u0439\u043b\u043e\u0430\u0434\u0435 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u043a\u043b\u044e\u0447 button @bot . message_handler ( filters . PayloadContainsFilter ( \"button\" ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"\u041d\u0430\u0436\u0430\u0442\u0430 \u043a\u043d\u043e\u043f\u043a\u0430 \u0441 \u043f\u0435\u0439\u043b\u043e\u0430\u0434\u043e\u043c button!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"PayloadContainsFilter"},{"location":"getting_started/filters/combining/","text":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u00b6 \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \"\u0418\" # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u0447\u0430\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c hi @bot . message_handler ( filters . TextFilter ( \"hi\" ), filters . MessageFromConversationTypeFilter ( \"from_pm\" ) ) def only_hi_in_text_from_pm ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 \u0422\u0430\u043a \u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u044b & , | \u0438\u043b\u0438 ~ \u043c\u0435\u0436\u0434\u0443 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 \u0432 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0435 \u0434\u043b\u044f \"\u0418\", \"\u0418\u041b\u0418\", \"\u041d\u0415\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e: # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u0447\u0430\u0442\u043e\u0432 \u0438\u043b\u0438 \u0442\u0435 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f hi @bot . message_handler ( ~ filters . TextFilter ( \"hi\" ) | filters . MessageFromConversationTypeFilter ( \"from_pm\" ) ) ) def not_hi_or_text_from_pm ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432"},{"location":"getting_started/filters/combining/#_1","text":"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0438 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e \u043e\u043d\u0438 \u0431\u0443\u0434\u0443\u0442 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u044b \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u043c \"\u0418\" # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u0447\u0430\u0442\u043e\u0432, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c hi @bot . message_handler ( filters . TextFilter ( \"hi\" ), filters . MessageFromConversationTypeFilter ( \"from_pm\" ) ) def only_hi_in_text_from_pm ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445 \u0422\u0430\u043a \u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0438\u043c\u0432\u043e\u043b\u044b & , | \u0438\u043b\u0438 ~ \u043c\u0435\u0436\u0434\u0443 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438 \u0432 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0435 \u0434\u043b\u044f \"\u0418\", \"\u0418\u041b\u0418\", \"\u041d\u0415\" \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e: # \u041b\u043e\u0432\u0438\u0442 \u0432\u0441\u0435 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u0438\u0437 \u043f\u0440\u0438\u0432\u0430\u0442\u043d\u044b\u0445 \u0447\u0430\u0442\u043e\u0432 \u0438\u043b\u0438 \u0442\u0435 \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u043d\u0435 \u0432\u0441\u0442\u0440\u0435\u0447\u0430\u0435\u0442\u0441\u044f hi @bot . message_handler ( ~ filters . TextFilter ( \"hi\" ) | filters . MessageFromConversationTypeFilter ( \"from_pm\" ) ) ) def not_hi_or_text_from_pm ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...\u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 \u043d\u0430 \u043d\u0438\u0445","title":"\u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432"},{"location":"getting_started/filters/custom/","text":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u00b6 \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u0435\u0441\u043b\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e. \u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432: \u041e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 BaseFilter \u00b6 \u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441, \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0432\u0448\u0438\u0441\u044c \u043e\u0442 BaseFilter \u0438\u0437 vkwave.bots.core.dispatching.filters.base \u041b\u043e\u0433\u0438\u043a\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 check, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 event \u2014 \u0441\u0432\u0435\u0436\u0435\u043f\u0440\u0438\u0448\u0435\u0434\u0448\u0435\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 from vkwave.bots.core.dispatching.filters import base , builtin class AttachmentsFilter ( base . BaseFilter ): \"\"\"\u0424\u0438\u043b\u044c\u0442\u0440-\u043f\u0440\u0438\u043c\u0435\u0440. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438. \"\"\" async def check ( self , event : SimpleBotEvent ) -> base . FilterResult : \"\"\"\u041c\u0435\u0442\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438. \u0414\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c FilterResult \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c True \u0438\u043b\u0438 False, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u0443\u0441\u043f\u0435\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u0430. \"\"\" builtin . is_message_event ( event ) return base . FilterResult ( event . object . object . message . attachments is not None ) \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 filter_caster \u00b6 \u041b\u044e\u0431\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e/\u043b\u044f\u043c\u0431\u0434\u0443/\u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0443 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0432 \u0444\u0438\u043b\u044c\u0442\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f filter_caster from vkwave.bots.core.dispatching.filters import filter_caster has_attachments = filter_caster . cast ( lambda event : event . object . object . message . attachments is not None ) \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e/\u043b\u044f\u043c\u0431\u0434\u0443/\u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0443 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c filter.caster , \u043e\u043d \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438: @bot . message_handler ( lambda event : event . object . object . message . attachments is not None ) async def handler ( event ): await event . answer ( \"\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f\" )","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"getting_started/filters/custom/#_1","text":"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u0435\u0441\u043b\u0438 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u043d\u0435\u0434\u043e\u0441\u0442\u0430\u0442\u043e\u0447\u043d\u043e. \u041f\u0440\u0435\u0434\u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u043f\u043e\u0441\u043e\u0431\u043e\u0432 \u0434\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432:","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"getting_started/filters/custom/#-basefilter","text":"\u0414\u043b\u044f \u044d\u0442\u043e\u0433\u043e \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441, \u0443\u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0432\u0448\u0438\u0441\u044c \u043e\u0442 BaseFilter \u0438\u0437 vkwave.bots.core.dispatching.filters.base \u041b\u043e\u0433\u0438\u043a\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0432 \u043c\u0435\u0442\u043e\u0434\u0435 check, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 event \u2014 \u0441\u0432\u0435\u0436\u0435\u043f\u0440\u0438\u0448\u0435\u0434\u0448\u0435\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 from vkwave.bots.core.dispatching.filters import base , builtin class AttachmentsFilter ( base . BaseFilter ): \"\"\"\u0424\u0438\u043b\u044c\u0442\u0440-\u043f\u0440\u0438\u043c\u0435\u0440. \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u0442 \u043d\u0430\u043b\u0438\u0447\u0438\u0435 \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u0439 \u0432 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0438. \"\"\" async def check ( self , event : SimpleBotEvent ) -> base . FilterResult : \"\"\"\u041c\u0435\u0442\u043e\u0434, \u0432 \u043a\u043e\u0442\u043e\u0440\u043e\u043c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u043b\u043e\u0433\u0438\u043a\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438. \u0414\u043e\u043b\u0436\u0435\u043d \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c FilterResult \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c True \u0438\u043b\u0438 False, \u043e\u0442 \u043a\u043e\u0442\u043e\u0440\u043e\u0433\u043e \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u0443\u0441\u043f\u0435\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u0430. \"\"\" builtin . is_message_event ( event ) return base . FilterResult ( event . object . object . message . attachments is not None )","title":"\u041e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 BaseFilter"},{"location":"getting_started/filters/custom/#filter_caster","text":"\u041b\u044e\u0431\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e/\u043b\u044f\u043c\u0431\u0434\u0443/\u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0443 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0432 \u0444\u0438\u043b\u044c\u0442\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f filter_caster from vkwave.bots.core.dispatching.filters import filter_caster has_attachments = filter_caster . cast ( lambda event : event . object . object . message . attachments is not None ) \u0415\u0441\u043b\u0438 \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e/\u043b\u044f\u043c\u0431\u0434\u0443/\u043a\u043e\u0440\u0443\u0442\u0438\u043d\u0443 \u043d\u0430\u043f\u0440\u044f\u043c\u0443\u044e \u0432 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430, \u0442\u043e \u043c\u043e\u0436\u043d\u043e \u043d\u0435 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c filter.caster , \u043e\u043d \u0441\u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 \u043f\u043e\u0434 \u043a\u0430\u043f\u043e\u0442\u043e\u043c \u0430\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438: @bot . message_handler ( lambda event : event . object . object . message . attachments is not None ) async def handler ( event ): await event . answer ( \"\u041d\u0430\u0439\u0434\u0435\u043d\u044b \u0432\u043b\u043e\u0436\u0435\u043d\u0438\u044f\" )","title":"\u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u044b\u0439 filter_caster"},{"location":"getting_started/filters/","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u00b6 \u0424\u0438\u043b\u044c\u0442\u0440 - \u044d\u0442\u043e \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u0441\u0435\u044f\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e (\u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, id \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f, \u043a\u043e\u043c\u0430\u043d\u0434\u0430 - \u0447\u0442\u043e \u0443\u0433\u043e\u0434\u043d\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b) \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u00b6 \u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"getting_started/filters/#_1","text":"\u0424\u0438\u043b\u044c\u0442\u0440 - \u044d\u0442\u043e \u0441\u043f\u043e\u0441\u043e\u0431 \u043e\u0442\u0441\u0435\u044f\u0442\u044c \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044f\u0442 \u043f\u043e \u043a\u0430\u043a\u043e\u043c\u0443-\u0442\u043e \u0443\u0441\u043b\u043e\u0432\u0438\u044e (\u0442\u0435\u043a\u0441\u0442 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f, id \u043e\u0442\u043f\u0440\u0430\u0432\u0438\u0442\u0435\u043b\u044f, \u043a\u043e\u043c\u0430\u043d\u0434\u0430 - \u0447\u0442\u043e \u0443\u0433\u043e\u0434\u043d\u043e, \u0442\u0430\u043a \u043a\u0430\u043a \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b)","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"getting_started/filters/#_2","text":"\u0412\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u041e\u0431\u044a\u0435\u0434\u0438\u043d\u0435\u043d\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435"},{"location":"http/","text":"TODO \u00b6","title":"TODO"},{"location":"http/#todo","text":"","title":"TODO"},{"location":"longpoll/","text":"TODO \u00b6","title":"TODO"},{"location":"longpoll/#todo","text":"","title":"TODO"},{"location":"types/","text":"\u041e\u0431\u0437\u043e\u0440 \u00b6 \u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 pydantic \u0442\u0438\u043f\u044b, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 vk-schema. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u00b6 \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0412\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a vk api \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442. import requests from vkwave.types.responses import StatusGetResponse def get_my_status ( token : str ) -> StatusGetResponse : resp = requests . get ( \"https://api.vk.com/method/status.get\" , params = { \"v\" : \"5.103\" , \"access_token\" : token }, ) return StatusGetResponse ( ** resp . json ()) status : StatusGetResponse = get_my_status ( token = \"123\" ) print ( status . response . text )","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"types/#_1","text":"\u042d\u0442\u0430 \u0447\u0430\u0441\u0442\u044c \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 pydantic \u0442\u0438\u043f\u044b, \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043d\u0430 \u043e\u0444\u0438\u0446\u0438\u0430\u043b\u044c\u043d\u043e\u0439 vk-schema.","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"types/#_2","text":"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u044d\u0442\u043e\u0442 \u043c\u043e\u0434\u0443\u043b\u044c \u0434\u043b\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0438\u0437\u0430\u0446\u0438\u0438 \u0432\u0430\u0448\u0438\u0445 \u0434\u0430\u043d\u043d\u044b\u0445, \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u043e\u0442 \u0412\u043a\u043e\u043d\u0442\u0430\u043a\u0442\u0435. \u0414\u043b\u044f \u043f\u0440\u0438\u043c\u0435\u0440\u0430 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u043a vk api \u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0442\u0438\u043f\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u043e\u0431\u044a\u0435\u043a\u0442. import requests from vkwave.types.responses import StatusGetResponse def get_my_status ( token : str ) -> StatusGetResponse : resp = requests . get ( \"https://api.vk.com/method/status.get\" , params = { \"v\" : \"5.103\" , \"access_token\" : token }, ) return StatusGetResponse ( ** resp . json ()) status : StatusGetResponse = get_my_status ( token = \"123\" ) print ( status . response . text )","title":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435"},{"location":"ru/getting_started/events/","text":"\u0421\u043e\u0431\u044b\u0442\u0438\u044f \u00b6 \u041a\u0430\u0436\u0434\u043e\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442\u0441\u044f \u043e\u0442 \u043a\u043b\u0430\u0441\u0441\u0430 SimpleBotEvent ::: vkwave.bots.addons.easy.SimpleBotEvent \u00b6 rendering: show_root_heading: true show_source: false selection: inherited_members: true filters: - \"!^_\"","title":"\u0421\u043e\u0431\u044b\u0442\u0438\u044f"},{"location":"ru/getting_started/events/#vkwavebotsaddonseasysimplebotevent","text":"rendering: show_root_heading: true show_source: false selection: inherited_members: true filters: - \"!^_\"","title":"::: vkwave.bots.addons.easy.SimpleBotEvent"},{"location":"en/","text":"VKWave is come. Bot shouldn't be your first project. At first learn language, then do something easier. VkWave \u00b6 :russia: \u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f VKWave is a framework to create performance and extensible projects, working with vk.com's API. VKWave inspired by: aiogram , vk.py and so on. Current maintainer of the project: @KurimuzonAkuma Documentation Usage examples Why VKWave? \u00b6 Totally customizable Asynchronous Full coverage by types' annotations Installation \u00b6 Install stable and tested version from PyPi: pip install vkwave Or from Github, with all new functionality. pip install https://github.com/fscdev/vkwave/archive/master.zip Performance \u00b6 VKWave - isn't very fast library, because of our belief that simple customization and convinience is more important than speed. But we interested in enhancment of performance, so pull requests will be appreciated. Community \u00b6 VKWave is very young project, but already collected a lot of fans. Library to easy access vk.com's API Telegram chat Extensions \u00b6 If you wanna create extension for VKWave (i. e. more easy way to create bots, even easier than vkwave.bots.addons.easy ), you should name your project like vkwave-<part-of-vkwave>-<name-of-project>","title":"Index"},{"location":"en/#vkwave","text":":russia: \u0420\u0443\u0441\u0441\u043a\u0430\u044f \u0432\u0435\u0440\u0441\u0438\u044f VKWave is a framework to create performance and extensible projects, working with vk.com's API. VKWave inspired by: aiogram , vk.py and so on. Current maintainer of the project: @KurimuzonAkuma Documentation Usage examples","title":"VkWave"},{"location":"en/#why-vkwave","text":"Totally customizable Asynchronous Full coverage by types' annotations","title":"Why VKWave?"},{"location":"en/#installation","text":"Install stable and tested version from PyPi: pip install vkwave Or from Github, with all new functionality. pip install https://github.com/fscdev/vkwave/archive/master.zip","title":"Installation"},{"location":"en/#performance","text":"VKWave - isn't very fast library, because of our belief that simple customization and convinience is more important than speed. But we interested in enhancment of performance, so pull requests will be appreciated.","title":"Performance"},{"location":"en/#community","text":"VKWave is very young project, but already collected a lot of fans. Library to easy access vk.com's API Telegram chat","title":"Community"},{"location":"en/#extensions","text":"If you wanna create extension for VKWave (i. e. more easy way to create bots, even easier than vkwave.bots.addons.easy ), you should name your project like vkwave-<part-of-vkwave>-<name-of-project>","title":"Extensions"},{"location":"en/api/api/","text":"API \u00b6 \u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c 3 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API: API , APIOptions , APIOptionsRequestContext . API \u044d\u0442\u043e \u044f\u0434\u0440\u043e. \u041e\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b. from vkwave.api import API , Token , UserSyncSingleToken my_token = Token ( 'token' ) api = API ( tokens = UserSyncSingleToken ( my_token )) \u0412 APIOptions \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f tokens , clients , strategy \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0435\u0449\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u0447\u0435\u0440\u0435\u0437 api.default_api_options . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442, \u0442\u043e\u043a\u0435\u043d \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e api = API ( ... ) api . default_api_options . add_token ( tokens = [ ... ]) # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d \u041d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u044d\u0442\u0438\u043c \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442! api_session = API ( ... ) api = api_session . get_context () \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043f\u0438\u0448\u0435\u0442\u0435 \u044d\u0442\u043e - \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 APIOptionsRequestContext . \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 APIOptions . result = await api . status . get () print ( result . response . text ) API Handler \u00b6 \u0423 \u0432\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441. \u041a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 API, \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430, \u043d\u0435\u0443\u0436\u0435\u043b\u0438 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u0435\u0437\u0434\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 API? \u041d\u043e \u043d\u0435\u0442, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0430\u043c\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f: from vkwave.bots import SimpleLongPollBot , SimpleBotEvent bot = SimpleLongPollBot ( tokens = 'mytoken' , group_id =- 1 ) @bot . message_handler ( bot . command_filter ( 'getuser' )) async def get_user ( event : SimpleBotEvent ): api = event . api_ctx user_id = event . text . split ()[ 1 ] user_info = ( await api . users . get ( user_ids = user_id )) . response [ 0 ] return f '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435: { user_info } ' \u0427\u0435\u0440\u0435\u0437 \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u043f\u0446\u0438\u044f\u043c API \u0447\u0435\u0440\u0435\u0437 api.pi_options.","title":"API"},{"location":"en/api/api/#api","text":"\u0423 \u043d\u0430\u0441 \u0435\u0441\u0442\u044c 3 \u043a\u043b\u0430\u0441\u0441\u0430 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API: API , APIOptions , APIOptionsRequestContext . API \u044d\u0442\u043e \u044f\u0434\u0440\u043e. \u041e\u043d\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u0442\u043e\u043a\u0435\u043d\u044b \u0438 \u043a\u043b\u0438\u0435\u043d\u0442\u044b. from vkwave.api import API , Token , UserSyncSingleToken my_token = Token ( 'token' ) api = API ( tokens = UserSyncSingleToken ( my_token )) \u0412 APIOptions \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f tokens , clients , strategy \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0432\u0435\u0449\u0438, \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a \u043d\u0438\u043c \u0434\u043e\u0441\u0442\u0443\u043f \u0447\u0435\u0440\u0435\u0437 api.default_api_options . \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442, \u0442\u043e\u043a\u0435\u043d \u0438\u043b\u0438 \u043e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e api = API ( ... ) api . default_api_options . add_token ( tokens = [ ... ]) # \u0438\u043b\u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0442\u043e\u043a\u0435\u043d \u041d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u0441 \u044d\u0442\u0438\u043c \u0432\u044b \u043d\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u0412\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442! api_session = API ( ... ) api = api_session . get_context () \u041a\u043e\u0433\u0434\u0430 \u0432\u044b \u043f\u0438\u0448\u0435\u0442\u0435 \u044d\u0442\u043e - \u0432\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442\u0435 APIOptionsRequestContext . \u041e\u043d \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0432\u0441\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 APIOptions . result = await api . status . get () print ( result . response . text )","title":"API"},{"location":"en/api/api/#api-handler","text":"\u0423 \u0432\u0430\u0441 \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u043d\u0438\u043a\u043d\u0443\u0442\u044c \u0432\u043e\u043f\u0440\u043e\u0441. \u041a\u0430\u043a \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 API, \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430, \u043d\u0435\u0443\u0436\u0435\u043b\u0438 \u043f\u0440\u0438\u0434\u0435\u0442\u0441\u044f \u0432\u0435\u0437\u0434\u0435 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0430\u0441\u0441 API? \u041d\u043e \u043d\u0435\u0442, \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043f\u0440\u044f\u043c\u043e \u0438\u0437 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u0432\u0430\u043c\u0438 \u0441\u043e\u0431\u044b\u0442\u0438\u044f: from vkwave.bots import SimpleLongPollBot , SimpleBotEvent bot = SimpleLongPollBot ( tokens = 'mytoken' , group_id =- 1 ) @bot . message_handler ( bot . command_filter ( 'getuser' )) async def get_user ( event : SimpleBotEvent ): api = event . api_ctx user_id = event . text . split ()[ 1 ] user_info = ( await api . users . get ( user_ids = user_id )) . response [ 0 ] return f '\u0418\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435: { user_info } ' \u0427\u0435\u0440\u0435\u0437 \u0434\u0430\u043d\u043d\u044b\u0439 \u0441\u043f\u043e\u0441\u043e\u0431 \u0442\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u043e\u043f\u0446\u0438\u044f\u043c API \u0447\u0435\u0440\u0435\u0437 api.pi_options.","title":"API Handler"},{"location":"en/api/","text":"Overview \u00b6 VKWave API is very convinient part of the library. It contains three parts: Working with tokens (Dynamic fetching tokens, multitokens.) Defining VK's API methods. Wrapper over methods and tokens. Working with tokens \u00b6 Tokens in VKWave is regular Python classes with get_token method. It could be synchronous or asynchronous from vkwave.api.token.token import UserSyncSingleToken , BotSyncSingleToken , Token # our tokens. we got them from VK bot_plain_token = Token ( \"...\" ) user_plain_token = Token ( \"...\" ) # tokens that are ready for using. bot_token = BotSyncSingleToken ( bot_plain_token ) user_token = UserSyncSingleToken ( user_plain_token ) bot_token . get_token () # ... user_token . get_token () # ... You can create your own class with your own logic. Let's create synchronous token. import random from typing import List from vkwave.api.token.token import ABCBotSyncToken , Token class BotSyncRandomToken ( ABCBotSyncToken ): def __init__ ( self , tokens : List [ Token ]): self . tokens = tokens def get_token ( self , * args , ** kwargs ) -> Token : return random . choice ( self . tokens ) GetTokenStrategy \u00b6 Implement this, if you need a list of UserSyncSingleToken and you need make a request to API. By default VKWave uses RandomGetTokenStrategy , it's simply call random.choice(tokens) . In the example below we will implement our own strategy, to show that we can fetch tokens by network. from vkwave.api.token.strategy import ABCGetTokenStrategy from vkwave.api.token.token import Token , AnyABCToken , TokenType , GetTokenType # AnyABCToken means really any token. class ServerGetTokenStrategy ( ABCGetTokenStrategy ): token_type = ( TokenType . BOT , TokenType . USER ) get_token_type = ( GetTokenType . SYNC , GetTokenType . ASYNC ) # we will ignore tokens that VKWave gives us. async def get_token ( self , _ ) -> Token : token = await self . some_fancy_api . get_random_token () return token In this example we don't create new tokens, just fetching random and returns it. API \u00b6 API is the core class. It contains all tokens and API's methods. from vkwave.api import API from vkwave.client import AIOHTTPClient api = API ( tokens = my_token , clients = AIOHTTPClient ()) In APIOptions we have tokens , clients , strategy and other stuff, you can get access to them api.default_api_options . I. e. you can add client, token or change strategy. api = API ( ... ) api . default_api_options . add_token ( tokens = [ ... ]) # or add only one token But to make a request to API you must get a context. api_session = API ( ... ) api = api_session . get_context () result = await api . status . get () print ( result . response . text ) On each API's request context gets new token, according to strategy. It could be a problem in this case: friends = await api . friends . get () result = await api . messages . send ( ... ) You fetching friend with one token, and sending messages with other. To avoid this you need to synchronize tokens. async with api . sync_token () as sapi : friends = await sapi . friends . get () ... In the context manager will be used only one token. To get context you can use api_session.with_token or api_session.with_options api = api_session . with_token ( SomeToken ( ... )) api = api_session . with_options ( APIOptions ( ... ))","title":"Overview"},{"location":"en/api/#overview","text":"VKWave API is very convinient part of the library. It contains three parts: Working with tokens (Dynamic fetching tokens, multitokens.) Defining VK's API methods. Wrapper over methods and tokens.","title":"Overview"},{"location":"en/api/#working-with-tokens","text":"Tokens in VKWave is regular Python classes with get_token method. It could be synchronous or asynchronous from vkwave.api.token.token import UserSyncSingleToken , BotSyncSingleToken , Token # our tokens. we got them from VK bot_plain_token = Token ( \"...\" ) user_plain_token = Token ( \"...\" ) # tokens that are ready for using. bot_token = BotSyncSingleToken ( bot_plain_token ) user_token = UserSyncSingleToken ( user_plain_token ) bot_token . get_token () # ... user_token . get_token () # ... You can create your own class with your own logic. Let's create synchronous token. import random from typing import List from vkwave.api.token.token import ABCBotSyncToken , Token class BotSyncRandomToken ( ABCBotSyncToken ): def __init__ ( self , tokens : List [ Token ]): self . tokens = tokens def get_token ( self , * args , ** kwargs ) -> Token : return random . choice ( self . tokens )","title":"Working with tokens"},{"location":"en/api/#gettokenstrategy","text":"Implement this, if you need a list of UserSyncSingleToken and you need make a request to API. By default VKWave uses RandomGetTokenStrategy , it's simply call random.choice(tokens) . In the example below we will implement our own strategy, to show that we can fetch tokens by network. from vkwave.api.token.strategy import ABCGetTokenStrategy from vkwave.api.token.token import Token , AnyABCToken , TokenType , GetTokenType # AnyABCToken means really any token. class ServerGetTokenStrategy ( ABCGetTokenStrategy ): token_type = ( TokenType . BOT , TokenType . USER ) get_token_type = ( GetTokenType . SYNC , GetTokenType . ASYNC ) # we will ignore tokens that VKWave gives us. async def get_token ( self , _ ) -> Token : token = await self . some_fancy_api . get_random_token () return token In this example we don't create new tokens, just fetching random and returns it.","title":"GetTokenStrategy"},{"location":"en/api/#api","text":"API is the core class. It contains all tokens and API's methods. from vkwave.api import API from vkwave.client import AIOHTTPClient api = API ( tokens = my_token , clients = AIOHTTPClient ()) In APIOptions we have tokens , clients , strategy and other stuff, you can get access to them api.default_api_options . I. e. you can add client, token or change strategy. api = API ( ... ) api . default_api_options . add_token ( tokens = [ ... ]) # or add only one token But to make a request to API you must get a context. api_session = API ( ... ) api = api_session . get_context () result = await api . status . get () print ( result . response . text ) On each API's request context gets new token, according to strategy. It could be a problem in this case: friends = await api . friends . get () result = await api . messages . send ( ... ) You fetching friend with one token, and sending messages with other. To avoid this you need to synchronize tokens. async with api . sync_token () as sapi : friends = await sapi . friends . get () ... In the context manager will be used only one token. To get context you can use api_session.with_token or api_session.with_options api = api_session . with_token ( SomeToken ( ... )) api = api_session . with_options ( APIOptions ( ... ))","title":"API"},{"location":"en/api/work/","text":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438 \u00b6 \u0422\u043e\u043a\u0435\u043d\u044b \u0432 VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 Python \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c get_token . \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c from vkwave.api.token.token import UserSyncSingleToken , BotSyncSingleToken , Token # \u0422\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442 \u0412\u041a bot_plain_token = Token ( \"...\" ) user_plain_token = Token ( \"...\" ) # \u0422\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c bot_token = BotSyncSingleToken ( bot_plain_token ) user_token = UserSyncSingleToken ( user_plain_token ) bot_token . get_token () # ... user_token . get_token () # ... \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0431\u043e\u0442\u0430. import random from typing import List from vkwave.api.token.token import ABCBotSyncToken , Token class BotSyncRandomToken ( ABCBotSyncToken ): def __init__ ( self , tokens : List [ Token ]): self . tokens = tokens def get_token ( self , * args , ** kwargs ) -> Token : return random . choice ( self . tokens ) GetTokenStrategy \u00b6 \u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a UserSyncSingleToken \u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e VKWave \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 RandomGetTokenStrategy , \u043e\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 random.choice(tokens) . \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0438\u0436\u0435 \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0441\u0432\u043e\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438 \u043f\u043e \u0441\u0435\u0442\u0438. from vkwave.api.token.strategy import ABCGetTokenStrategy from vkwave.api.token.token import Token , TokenType , GetTokenType # AnyABCToken means really any token. class ServerGetTokenStrategy ( ABCGetTokenStrategy ): token_type = ( TokenType . BOT , TokenType . USER ) get_token_type = ( GetTokenType . SYNC , GetTokenType . ASYNC ) # we will ignore tokens that VKWave gives us. async def get_token ( self , _ ) -> Token : token = await self . some_fancy_api . get_random_token () return token \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u0432 API \u043e\u0431\u0451\u0440\u0442\u043a\u0443. \u041e\u043d \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0438\u0437 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0433\u043e API \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e.","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438"},{"location":"en/api/work/#_1","text":"\u0422\u043e\u043a\u0435\u043d\u044b \u0432 VKWave \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u044b \u043e\u0431\u044b\u0447\u043d\u044b\u043c\u0438 Python \u043a\u043b\u0430\u0441\u0441\u0430\u043c\u0438 \u0441 \u043c\u0435\u0442\u043e\u0434\u043e\u043c get_token . \u041e\u043d \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c \u0438\u043b\u0438 \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u043c from vkwave.api.token.token import UserSyncSingleToken , BotSyncSingleToken , Token # \u0422\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u044b \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u043c \u043e\u0442 \u0412\u041a bot_plain_token = Token ( \"...\" ) user_plain_token = Token ( \"...\" ) # \u0422\u043e\u043a\u0435\u043d, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c bot_token = BotSyncSingleToken ( bot_plain_token ) user_token = UserSyncSingleToken ( user_plain_token ) bot_token . get_token () # ... user_token . get_token () # ... \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0432\u043e\u0439 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0442\u043e\u043a\u0435\u043d\u0430 \u0441 \u043d\u0443\u0436\u043d\u043e\u0439 \u043b\u043e\u0433\u0438\u043a\u043e\u0439. \u0421\u043e\u0437\u0434\u0430\u0434\u0438\u043c \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0434\u043b\u044f \u0431\u043e\u0442\u0430. import random from typing import List from vkwave.api.token.token import ABCBotSyncToken , Token class BotSyncRandomToken ( ABCBotSyncToken ): def __init__ ( self , tokens : List [ Token ]): self . tokens = tokens def get_token ( self , * args , ** kwargs ) -> Token : return random . choice ( self . tokens )","title":"\u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0442\u043e\u043a\u0435\u043d\u0430\u043c\u0438"},{"location":"en/api/work/#gettokenstrategy","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u044d\u0442\u043e, \u0435\u0441\u043b\u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u0435\u043d \u0441\u043f\u0438\u0441\u043e\u043a UserSyncSingleToken \u0438 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0434\u043e\u0441\u0442\u0430\u0432\u0430\u0442\u044c \u0442\u043e\u043a\u0435\u043d, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441 \u0432 API. \u041f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e VKWave \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442 RandomGetTokenStrategy , \u043e\u043d\u0430 \u043f\u0440\u043e\u0441\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 random.choice(tokens) . \u0412 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0438\u0436\u0435 \u043c\u044b \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u043c \u0441\u0432\u043e\u044e \u0441\u0442\u0440\u0430\u0442\u0435\u0433\u0438\u044e, \u0447\u0442\u043e\u0431\u044b \u043f\u043e\u043a\u0430\u0437\u0430\u0442\u044c, \u0447\u0442\u043e \u0442\u043e\u043a\u0435\u043d\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u043e\u043b\u0443\u0447\u0430\u0442\u044c \u0438 \u043f\u043e \u0441\u0435\u0442\u0438. from vkwave.api.token.strategy import ABCGetTokenStrategy from vkwave.api.token.token import Token , TokenType , GetTokenType # AnyABCToken means really any token. class ServerGetTokenStrategy ( ABCGetTokenStrategy ): token_type = ( TokenType . BOT , TokenType . USER ) get_token_type = ( GetTokenType . SYNC , GetTokenType . ASYNC ) # we will ignore tokens that VKWave gives us. async def get_token ( self , _ ) -> Token : token = await self . some_fancy_api . get_random_token () return token \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u043d\u0435 \u0441\u043e\u0437\u0434\u0430\u044e\u0442\u0441\u044f \u0442\u043e\u043a\u0435\u043d\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u044b \u043f\u0435\u0440\u0435\u0434\u0430\u0451\u043c \u0432 API \u043e\u0431\u0451\u0440\u0442\u043a\u0443. \u041e\u043d \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0439 \u0442\u043e\u043a\u0435\u043d \u0438\u0437 \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0435\u0433\u043e API \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e.","title":"GetTokenStrategy"},{"location":"en/bots/easy/","text":"Easy bots \u00b6 Wrapper over vkwave.bots to fast bots creating. from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) @bot . message_handler () def handle ( _ ) -> str : return \"Hello world!\" bot . run_forever () vkwave.bots.easy supports: Simple sessions creating from vkwave.bots import create_api_session_aiohttp api_session = create_api_session_aiohttp ( \"TOKEN\" ) # api_session.api.get_context().users.get() Multiple tokens from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"bye\" )) def handle ( _ ) -> str : return \"bye world\" @bot . message_handler ( bot . text_filter ( \"hello\" )) async def handle ( event : bot . SimpleBotEvent ): await event . answer ( \"hello world!\" ) bot . run_forever () Bots-clones (many bots with common handlers) from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token1\" , 11111111 ), SimpleLongPollBot ( \"Token2\" , 22222222 ), ) clones . run_all_bots () If don't wanna use SimpleLongPollBot , but wanna simplify creating handlers - use easy_handlers from vkwave.bots import simple_bot_message_handler , SimpleBotEvent , DefaultRouter , TextFilter router = DefaultRouter () @simple_bot_message_handler ( router , TextFilter ( \"hello\" )) async def easy ( event : SimpleBotEvent ): await event . answer ( \"got hello\" ) It have several handlers: - simple_bot_message_handler - Catches new messages in group's bot - simple_bot_handler - Catches all events in group's bot - simple_user_message_handler - Catches new messages in user's bot - simple_user_handler - Catches all events in group's bot","title":"Easy bots"},{"location":"en/bots/easy/#easy-bots","text":"Wrapper over vkwave.bots to fast bots creating. from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) @bot . message_handler () def handle ( _ ) -> str : return \"Hello world!\" bot . run_forever () vkwave.bots.easy supports: Simple sessions creating from vkwave.bots import create_api_session_aiohttp api_session = create_api_session_aiohttp ( \"TOKEN\" ) # api_session.api.get_context().users.get() Multiple tokens from vkwave.bots import SimpleLongPollBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"bye\" )) def handle ( _ ) -> str : return \"bye world\" @bot . message_handler ( bot . text_filter ( \"hello\" )) async def handle ( event : bot . SimpleBotEvent ): await event . answer ( \"hello world!\" ) bot . run_forever () Bots-clones (many bots with common handlers) from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token1\" , 11111111 ), SimpleLongPollBot ( \"Token2\" , 22222222 ), ) clones . run_all_bots () If don't wanna use SimpleLongPollBot , but wanna simplify creating handlers - use easy_handlers from vkwave.bots import simple_bot_message_handler , SimpleBotEvent , DefaultRouter , TextFilter router = DefaultRouter () @simple_bot_message_handler ( router , TextFilter ( \"hello\" )) async def easy ( event : SimpleBotEvent ): await event . answer ( \"got hello\" ) It have several handlers: - simple_bot_message_handler - Catches new messages in group's bot - simple_bot_handler - Catches all events in group's bot - simple_user_message_handler - Catches new messages in user's bot - simple_user_handler - Catches all events in group's bot","title":"Easy bots"},{"location":"en/bots/fsm/","text":"FSM \u00b6 This module implements Finite-state machine for bots. FSM splits user's states, states of chats and states of user in chat, to select one of them you must pass argument for_what in FSM's methods. State of one user in private chats - ForWhat.FOR_USER State of chat - ForWhat.FOR_CHAT State of one user in multi-user chats - ForWhat.FOR_USER_IN_CHAT To choose handlers without StateFilter may be selected correctly, you should set default set. router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) Example poll with asking name and age. from vkwave.bots import EventTypeFilter , BotEvent from vkwave.types.bot_events import BotEventType from vkwave.bots.fsm import FiniteStateMachine , StateFilter , ForWhat , State , ANY_STATE fsm = FiniteStateMachine () router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) router . registrar . add_default_filter ( EventTypeFilter ( BotEventType . MESSAGE_NEW . value )) # we don't want to write it in all handlers. class MyState : name = State ( \"name\" ) age = State ( \"age\" ) # starting poll @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"start\" , ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . name , for_what = ForWhat . FOR_USER ) return \"Input your name\" # exiting from poll (works on any state) @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"exit\" , StateFilter ( fsm = fsm , state = ANY_STATE , for_what = ForWhat . FOR_USER ) ) async def simple_handler ( event : BotEvent ): # Check if we have the user in database if await fsm . get_data ( event , for_what = ForWhat . FOR_USER ) is not None : await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return \"You are quited!\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . name , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . age , for_what = ForWhat . FOR_USER , extra_state_data = { \"name\" : event . object . object . message . text }, ) # extra_state_data works as fsm.add_data(..., state_data={\"name\": event.object.object.message.text}) return \"Input your age\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . age , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): if not event . object . object . message . text . isdigit (): return f \"Please, send only positive numbers!\" await fsm . add_data ( event = event , for_what = ForWhat . FOR_USER , state_data = { \"age\" : event . object . object . message . text }, ) user_data = await fsm . get_data ( event = event , for_what = ForWhat . FOR_USER ) # finish poll and delete the user # `fsm.finish` will do it await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return f \"Your data - { user_data } \" You will get somthing like this: Your data - {'__vkwave_fsm_state__': '<vkwave.bots_fsm.fsm.State object at 0x0000021C19D61A90>', 'name': 'Nick', 'age': '46'}","title":"FSM"},{"location":"en/bots/fsm/#fsm","text":"This module implements Finite-state machine for bots. FSM splits user's states, states of chats and states of user in chat, to select one of them you must pass argument for_what in FSM's methods. State of one user in private chats - ForWhat.FOR_USER State of chat - ForWhat.FOR_CHAT State of one user in multi-user chats - ForWhat.FOR_USER_IN_CHAT To choose handlers without StateFilter may be selected correctly, you should set default set. router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) Example poll with asking name and age. from vkwave.bots import EventTypeFilter , BotEvent from vkwave.types.bot_events import BotEventType from vkwave.bots.fsm import FiniteStateMachine , StateFilter , ForWhat , State , ANY_STATE fsm = FiniteStateMachine () router . registrar . add_default_filter ( StateFilter ( fsm , ... , ... , always_false = True )) router . registrar . add_default_filter ( EventTypeFilter ( BotEventType . MESSAGE_NEW . value )) # we don't want to write it in all handlers. class MyState : name = State ( \"name\" ) age = State ( \"age\" ) # starting poll @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"start\" , ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . name , for_what = ForWhat . FOR_USER ) return \"Input your name\" # exiting from poll (works on any state) @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"exit\" , StateFilter ( fsm = fsm , state = ANY_STATE , for_what = ForWhat . FOR_USER ) ) async def simple_handler ( event : BotEvent ): # Check if we have the user in database if await fsm . get_data ( event , for_what = ForWhat . FOR_USER ) is not None : await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return \"You are quited!\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . name , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): await fsm . set_state ( event = event , state = MyState . age , for_what = ForWhat . FOR_USER , extra_state_data = { \"name\" : event . object . object . message . text }, ) # extra_state_data works as fsm.add_data(..., state_data={\"name\": event.object.object.message.text}) return \"Input your age\" @router . registrar . with_decorator ( StateFilter ( fsm = fsm , state = MyState . age , for_what = ForWhat . FOR_USER ), ) async def simple_handler ( event : BotEvent ): if not event . object . object . message . text . isdigit (): return f \"Please, send only positive numbers!\" await fsm . add_data ( event = event , for_what = ForWhat . FOR_USER , state_data = { \"age\" : event . object . object . message . text }, ) user_data = await fsm . get_data ( event = event , for_what = ForWhat . FOR_USER ) # finish poll and delete the user # `fsm.finish` will do it await fsm . finish ( event = event , for_what = ForWhat . FOR_USER ) return f \"Your data - { user_data } \" You will get somthing like this: Your data - {'__vkwave_fsm_state__': '<vkwave.bots_fsm.fsm.State object at 0x0000021C19D61A90>', 'name': 'Nick', 'age': '46'}","title":"FSM"},{"location":"en/bots/","text":"Overview \u00b6 This part contains information about bots in VKWave FiniteStateMachine Routers Storages Usage Easy bots","title":"Overview"},{"location":"en/bots/#overview","text":"This part contains information about bots in VKWave FiniteStateMachine Routers Storages Usage Easy bots","title":"Overview"},{"location":"en/bots/routers/","text":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b \u00b6 \u0411\u0435\u0437 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u043e\u0432 \u0432 VKWave \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u042d\u0442\u043e \u043e\u0434\u043d\u0430 \u0438\u0437 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u043e\u0442\u0435. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0432\u0430\u0448 \u0431\u043e\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438. \u041f\u043e\u0441\u043e\u0431\u0438\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c \u00b6 \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435: from vkwave.bots import DefaultRouter router = DefaultRouter () # also you can pass here filters # it can be like: router = Router(SomeFilter(...)) \u041a\u0430\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b? \u0411\u043e\u043b\u044c\u0448\u0435 \u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u0432 handlers.md . r = router . registrar # just a shortcut handler = r . new () . with_filters ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) . handle ( \"hey!\" ) # here we are creating the handler that answers 'hey' to messages with content 'hi there' r . register ( handler ) # and.. we register it. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b. @r . with_decorator ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) def handler ( event : BaseEvent ) -> str : return \"Hey!\" \u0415\u0441\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u043d\u043e \u043e\u043d \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u043e\u0432\u0441\u0435\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. registrar \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0446\u0438\u044e \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432. \u041e\u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043a\u043e \u0432\u0441\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0435. router . registrar . add_default_filter ( SomeFilter ( ... )) \u0418 \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u043e\u0443\u0442\u0435\u0440 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440 ( dispatcher.md , please). dp . add_router ( router ) \u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u00b6 \u0414\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440. \u041f\u0440\u0438\u043c\u0435\u0440 \u0431\u043e\u0442\u0430 VkWaveBotExample","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"en/bots/routers/#_1","text":"\u0411\u0435\u0437 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u043e\u0432\u0430\u043d\u0438\u0435 \u0431\u043e\u0442\u043e\u0432 \u0432 VKWave \u043d\u0435\u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e. \u042d\u0442\u043e \u043e\u0434\u043d\u0430 \u0438\u0437 \u0432\u0430\u0436\u043d\u0435\u0439\u0448\u0438\u0445 \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u043c \u0431\u043e\u0442\u0435. \u0414\u0440\u0443\u0433\u0438\u043c\u0438 \u0441\u043b\u043e\u0432\u0430\u043c\u0438, \u0432\u0430\u0448 \u0431\u043e\u0442 \u044d\u0442\u043e \u043f\u0440\u043e\u0441\u0442\u043e \u043d\u0430\u0431\u043e\u0440 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u043c\u0438.","title":"\u0420\u043e\u0443\u0442\u0435\u0440\u044b"},{"location":"en/bots/routers/#_2","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435: from vkwave.bots import DefaultRouter router = DefaultRouter () # also you can pass here filters # it can be like: router = Router(SomeFilter(...)) \u041a\u0430\u043a \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b? \u0411\u043e\u043b\u044c\u0448\u0435 \u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u0445 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0443\u0437\u043d\u0430\u0442\u044c \u0432 handlers.md . r = router . registrar # just a shortcut handler = r . new () . with_filters ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) . handle ( \"hey!\" ) # here we are creating the handler that answers 'hey' to messages with content 'hi there' r . register ( handler ) # and.. we register it. \u0422\u0430\u043a\u0436\u0435 \u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b. @r . with_decorator ( lambda event : event . object . object . message . text . lower () == \"hi there\" ) def handler ( event : BaseEvent ) -> str : return \"Hey!\" \u0415\u0441\u0442\u044c \u0435\u0449\u0435 \u043e\u0434\u0438\u043d \u0441\u043f\u043e\u0441\u043e\u0431 \u0434\u0435\u043b\u0430\u0442\u044c \u044d\u0442\u043e, \u043d\u043e \u043e\u043d \u043d\u0435 \u043d\u0443\u0436\u0435\u043d \u0434\u043b\u044f \u043f\u043e\u0432\u0441\u0435\u043c\u0435\u0441\u0442\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. registrar \u0440\u043e\u0443\u0442\u0435\u0440\u0430 \u0438\u043c\u0435\u0435\u0442 \u043e\u043f\u0446\u0438\u044e \u0434\u043b\u044f \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u044b\u0445 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432. \u041e\u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u0444\u0438\u043b\u044c\u0442\u0440 \u043a\u043e \u0432\u0441\u0435\u043c \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430\u043c \u0432 \u0440\u043e\u0443\u0442\u0435\u0440\u0435. router . registrar . add_default_filter ( SomeFilter ( ... )) \u0418 \u043d\u0430\u043a\u043e\u043d\u0435\u0446, \u043a\u0430\u043a \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0440\u043e\u0443\u0442\u0435\u0440 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440 ( dispatcher.md , please). dp . add_router ( router )","title":"\u041f\u043e\u0441\u043e\u0431\u0438\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0430\u043c"},{"location":"en/bots/routers/#_3","text":"\u0414\u043b\u044f \u0440\u0430\u0437\u0431\u0438\u0432\u043a\u0438 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0437\u0434\u0430\u0442\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u043e \u0440\u043e\u0443\u0442\u0435\u0440\u0443 \u0438 \u0434\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u0442\u0443\u0434\u0430 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u044b, \u0434\u0430\u043b\u0435\u0435 \u043f\u0440\u043e\u0441\u0442\u043e \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0432\u0441\u0435 \u0432 \u0433\u043b\u0430\u0432\u043d\u043e\u043c \u0444\u0430\u0439\u043b\u0435 \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0432\u0441\u0435\u0445 \u0440\u043e\u0443\u0442\u0435\u0440\u043e\u0432 \u0432 \u0434\u0438\u0441\u043f\u0430\u0442\u0447\u0435\u0440. \u041f\u0440\u0438\u043c\u0435\u0440 \u0431\u043e\u0442\u0430 VkWaveBotExample","title":"\u0420\u0430\u0437\u0431\u0438\u0432\u043a\u0430 \u0431\u043e\u0442\u0430 \u043f\u043e \u0444\u0430\u0439\u043b\u0430\u043c"},{"location":"en/bots/storage/","text":"Storage \u00b6 This module will help you store data in bot. You have three different storages: - dict-like - ttl - redis import asyncio from vkwave.bots.storage.storages import Storage from vkwave.bots.storage.types import Key storage = Storage () async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 ) print ( await storage . contains ( my_key )) # True await storage . delete ( my_key ) print ( await storage . contains ( my_key )) # False print ( await storage . get ( my_key , default = 789 )) # 789 if __name__ == '__main__' : asyncio . get_event_loop () . run_until_complete ( main ()) If you need time-to-life storage: from vkwave.bots.storage.storages import TTLStorage from vkwave.bots.storage.types import Key storage = TTLStorage ( default_ttl = 10 ) async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False If you wanna use Redis: from vkwave.bots.storage.storages import RedisStorage storage = RedisStorage ( default_ttl = 10 ) # you can also specify the host, port, db and password async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False await storage . close () await storage . wait_closed ()","title":"Storage"},{"location":"en/bots/storage/#storage","text":"This module will help you store data in bot. You have three different storages: - dict-like - ttl - redis import asyncio from vkwave.bots.storage.storages import Storage from vkwave.bots.storage.types import Key storage = Storage () async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 ) print ( await storage . contains ( my_key )) # True await storage . delete ( my_key ) print ( await storage . contains ( my_key )) # False print ( await storage . get ( my_key , default = 789 )) # 789 if __name__ == '__main__' : asyncio . get_event_loop () . run_until_complete ( main ()) If you need time-to-life storage: from vkwave.bots.storage.storages import TTLStorage from vkwave.bots.storage.types import Key storage = TTLStorage ( default_ttl = 10 ) async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False If you wanna use Redis: from vkwave.bots.storage.storages import RedisStorage storage = RedisStorage ( default_ttl = 10 ) # you can also specify the host, port, db and password async def main (): my_key = Key ( \"123\" ) await storage . put ( my_key , 456 , ttl = 2 ) print ( await storage . contains ( my_key )) # True await asyncio . sleep ( 2 ) print ( await storage . contains ( my_key )) # False await storage . close () await storage . wait_closed ()","title":"Storage"},{"location":"en/bots/usage/","text":"Usage \u00b6 \u0421 \u044d\u0442\u0438\u043c \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0431\u043e\u0442\u043e\u0432 \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 6 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0434\u0430. \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c \u0431\u043e\u0442\u0430-\u0433\u0440\u0443\u043f\u043f\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f message_new \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c hello \u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442 \u0434\u043b\u044f API. import logging import asyncio from vkwave.client import AIOHTTPClient from vkwave.api import BotSyncSingleToken , Token , API from vkwave.bots import ( TokenStorage , Dispatcher , BotLongpollExtension , DefaultRouter , GroupId , EventTypeFilter , ) from vkwave.types.bot_events import BotEventType from vkwave.longpoll import BotLongpollData , BotLongpoll logging . basicConfig ( level = logging . DEBUG ) bot_token = Token ( \"123\" ) gid = 456 async def main (): client = AIOHTTPClient () token = BotSyncSingleToken ( bot_token ) api_session = API ( token , client ) api = api_session . get_context () lp_data = BotLongpollData ( gid ) longpoll = BotLongpoll ( api , lp_data ) token_storage = TokenStorage [ GroupId ]() dp = Dispatcher ( api_session , token_storage ) lp_extension = BotLongpollExtension ( dp , longpoll ) router = DefaultRouter () simple_handler = ( router . registrar . new () . with_filters ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) . handle ( lambda event : f \"hello, { event . object . object . message . from_id } \" ) . ready () ) # >> hello # >> hello, 578716413 router . registrar . register ( simple_handler ) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () if __name__ == \"__main__\" : loop = asyncio . get_event_loop () loop . create_task ( main ()) loop . run_forever () \u0414\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430. ... class TextFilter ( BaseFilter ): async def check ( self , event : BotEvent ) -> FilterResult : return FilterResult ( event . object . object . message . text == \"hello\" ) class MyCallback ( BaseCallback ): def __init__ ( self , func : Callable [[ BaseEvent ], Awaitable [ Any ]]): self . func = func async def execute ( self , event : BaseEvent ) -> Any : # do smth await asyncio . sleep ( 5 ) return await self . func ( event ) async def answer ( event : BotEvent ): event : BotEvent return f \"hello, { event . object . object . message . from_id } \" def get_handler ( router ): event_type_filter = EventTypeFilter ( BotEventType . MESSAGE_NEW ) text_filter = TextFilter () result_callback = MyCallback ( answer ) simple_handler = router . registrar . new () simple_handler . filters = [ event_type_filter , text_filter ] simple_handler . callback = result_callback return simple_handler async def main (): ... simple_handler = get_handler ( router ) router . registrar . register ( simple_handler . ready ()) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () \u0418 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d. router = DefaultRouter () @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) def simple_handler ( event : BotEvent ): return f \"hello, { event . object . object . message . from_id } \" @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"bye\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) async def another_simple_handler ( event : BotEvent ): return await event . api_ctx . messages . send ( message = f \"bye, { event . object . object . message . from_id } \" , random_id = 0 , user_id = event . object . object . message . from_id , )","title":"Usage"},{"location":"en/bots/usage/#usage","text":"\u0421 \u044d\u0442\u0438\u043c \u043c\u043e\u0434\u0443\u043b\u0435\u043c \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u044e\u0437\u0435\u0440\u0431\u043e\u0442\u043e\u0432 \u0438\u043b\u0438 \u043f\u0440\u043e\u0441\u0442\u044b\u0445 \u0431\u043e\u0442\u043e\u0432 \u0441 \u043b\u0435\u0433\u043a\u043e\u0441\u0442\u044c\u044e. \u0414\u043b\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u0433\u043e \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430 \u0432\u0430\u043c \u043d\u0443\u0436\u043d\u043e \u043c\u0435\u043d\u044c\u0448\u0435 6 \u0441\u0442\u0440\u043e\u043a \u043a\u043e\u0434\u0430. \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0438\u0434\u0435\u0442\u044c \u0431\u043e\u0442\u0430-\u0433\u0440\u0443\u043f\u043f\u0443 \u0441 \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u043c \u0434\u043b\u044f \u0441\u043e\u0431\u044b\u0442\u0438\u044f message_new \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c hello \u0438 \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u043e\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0435\u043b\u044b\u0432\u0430\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u0443\u044e \u0441\u0442\u0440\u043e\u043a\u0443 \u0432 \u043e\u0442\u0432\u0435\u0442 \u0434\u043b\u044f API. import logging import asyncio from vkwave.client import AIOHTTPClient from vkwave.api import BotSyncSingleToken , Token , API from vkwave.bots import ( TokenStorage , Dispatcher , BotLongpollExtension , DefaultRouter , GroupId , EventTypeFilter , ) from vkwave.types.bot_events import BotEventType from vkwave.longpoll import BotLongpollData , BotLongpoll logging . basicConfig ( level = logging . DEBUG ) bot_token = Token ( \"123\" ) gid = 456 async def main (): client = AIOHTTPClient () token = BotSyncSingleToken ( bot_token ) api_session = API ( token , client ) api = api_session . get_context () lp_data = BotLongpollData ( gid ) longpoll = BotLongpoll ( api , lp_data ) token_storage = TokenStorage [ GroupId ]() dp = Dispatcher ( api_session , token_storage ) lp_extension = BotLongpollExtension ( dp , longpoll ) router = DefaultRouter () simple_handler = ( router . registrar . new () . with_filters ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) . handle ( lambda event : f \"hello, { event . object . object . message . from_id } \" ) . ready () ) # >> hello # >> hello, 578716413 router . registrar . register ( simple_handler ) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () if __name__ == \"__main__\" : loop = asyncio . get_event_loop () loop . create_task ( main ()) loop . run_forever () \u0414\u0440\u0443\u0433\u043e\u0439 \u043f\u0443\u0442\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0445\u0435\u043d\u0434\u043b\u0435\u0440\u0430. ... class TextFilter ( BaseFilter ): async def check ( self , event : BotEvent ) -> FilterResult : return FilterResult ( event . object . object . message . text == \"hello\" ) class MyCallback ( BaseCallback ): def __init__ ( self , func : Callable [[ BaseEvent ], Awaitable [ Any ]]): self . func = func async def execute ( self , event : BaseEvent ) -> Any : # do smth await asyncio . sleep ( 5 ) return await self . func ( event ) async def answer ( event : BotEvent ): event : BotEvent return f \"hello, { event . object . object . message . from_id } \" def get_handler ( router ): event_type_filter = EventTypeFilter ( BotEventType . MESSAGE_NEW ) text_filter = TextFilter () result_callback = MyCallback ( answer ) simple_handler = router . registrar . new () simple_handler . filters = [ event_type_filter , text_filter ] simple_handler . callback = result_callback return simple_handler async def main (): ... simple_handler = get_handler ( router ) router . registrar . register ( simple_handler . ready ()) dp . add_router ( router ) await dp . cache_potential_tokens () await lp_extension . start () \u0418 \u0435\u0449\u0435 \u043e\u0434\u0438\u043d. router = DefaultRouter () @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"hello\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) def simple_handler ( event : BotEvent ): return f \"hello, { event . object . object . message . from_id } \" @router . registrar . with_decorator ( lambda event : event . object . object . message . text == \"bye\" , EventTypeFilter ( BotEventType . MESSAGE_NEW ), ) async def another_simple_handler ( event : BotEvent ): return await event . api_ctx . messages . send ( message = f \"bye, { event . object . object . message . from_id } \" , random_id = 0 , user_id = event . object . object . message . from_id , )","title":"Usage"},{"location":"en/client/context/","text":"Context \u00b6 When you call client.create_request you get context of the request. It contains request's result Exceptions \u00b6 Clients can raise exceptins. They should describe it in RequestContext , so exception handlers can handle them. One exception can have only one handler. # ... async def timeout_handler ( ctx : RequestContext ) -> None : # only dict ctx . result . exception_data = { \"data\" : \"Exception was occurred..\" } # ... ctx . set_exception_handler ( TimeoutException , timeout_handler ) # handling timeout error await ctx . send_request () # if TimeoutException occured , error will handled in our handler if ctx . result . state is ResultState . HANDLED_EXCEPTION : data = ctx . result . exception_data elif ctx . result . state is ResultState . UNHANDLED_EXCEPTION : print ( f \"Exception is { ctx . result . exception } \" ) sys . exit ( - 1 ) else : data = ctx . result . data print ( data )","title":"Context"},{"location":"en/client/context/#context","text":"When you call client.create_request you get context of the request. It contains request's result","title":"Context"},{"location":"en/client/context/#exceptions","text":"Clients can raise exceptins. They should describe it in RequestContext , so exception handlers can handle them. One exception can have only one handler. # ... async def timeout_handler ( ctx : RequestContext ) -> None : # only dict ctx . result . exception_data = { \"data\" : \"Exception was occurred..\" } # ... ctx . set_exception_handler ( TimeoutException , timeout_handler ) # handling timeout error await ctx . send_request () # if TimeoutException occured , error will handled in our handler if ctx . result . state is ResultState . HANDLED_EXCEPTION : data = ctx . result . exception_data elif ctx . result . state is ResultState . UNHANDLED_EXCEPTION : print ( f \"Exception is { ctx . result . exception } \" ) sys . exit ( - 1 ) else : data = ctx . result . data print ( data )","title":"Exceptions"},{"location":"en/client/custom/","text":"Custom clients \u00b6 Using of VKWave gives you good customization options. What for? \u00b6 When we creating application, we can get a lot of problems, like API limits, customers' requests and so on. Some of them you can solve by modifying high-level code. VKWave gives another way to do it - you can control low-level of your application and your code will remain high-level . Example \u00b6 How to create custom client? It can be whatever you want, i. e. it can send requests to another server. from vkwave.client.factory import DefaultFactory , AbstractFactory async def callback ( method_name , params : dict ): return { \"response\" : { \"text\" : \"it's fake!\" }} class FakeClient ( AbstractHTTPClient ): def __init__ ( self ): self . _factory = DefaultFactory () @property def context_factory ( self ) -> AbstractFactory : return self . _factory def set_context_factory ( self , factory : AbstractFactory ): self . _factory = factory async def request ( self , method_name , params : dict ): ctx = self . context_factory . create_context ( request_callback = callback , method_name = method_name , request_params = params , exceptions = {}, ) return ctx async def close ( self ): print ( \"closing nothing...\" ) Other parts of vkwave core will get http \u043a\u043b\u0438\u0435\u043d\u0442 as parameter.","title":"Custom clients"},{"location":"en/client/custom/#custom-clients","text":"Using of VKWave gives you good customization options.","title":"Custom clients"},{"location":"en/client/custom/#what-for","text":"When we creating application, we can get a lot of problems, like API limits, customers' requests and so on. Some of them you can solve by modifying high-level code. VKWave gives another way to do it - you can control low-level of your application and your code will remain high-level .","title":"What for?"},{"location":"en/client/custom/#example","text":"How to create custom client? It can be whatever you want, i. e. it can send requests to another server. from vkwave.client.factory import DefaultFactory , AbstractFactory async def callback ( method_name , params : dict ): return { \"response\" : { \"text\" : \"it's fake!\" }} class FakeClient ( AbstractHTTPClient ): def __init__ ( self ): self . _factory = DefaultFactory () @property def context_factory ( self ) -> AbstractFactory : return self . _factory def set_context_factory ( self , factory : AbstractFactory ): self . _factory = factory async def request ( self , method_name , params : dict ): ctx = self . context_factory . create_context ( request_callback = callback , method_name = method_name , request_params = params , exceptions = {}, ) return ctx async def close ( self ): print ( \"closing nothing...\" ) Other parts of vkwave core will get http \u043a\u043b\u0438\u0435\u043d\u0442 as parameter.","title":"Example"},{"location":"en/client/","text":"Overview \u00b6 Most low-level part of VKWave.","title":"Overview"},{"location":"en/client/#overview","text":"Most low-level part of VKWave.","title":"Overview"},{"location":"en/client/using/","text":"Using \u00b6 This part of library shouldn't be used directly, but will be useful if you want to write VKWave's extensions. How to \u00b6 from vkwave.client.default import AIOHTTPClient from vkwave.client.context import ResultState import asyncio async def main (): base_params = { \"access_token\" : \"xxxxxx\" , \"v\" : \"5.103\" } client = AIOHTTPClient () ctx = client . create_request ( \"status.get\" , ** base_params ) await ctx . send_request () if ctx . result . state is ResultState . SUCCESS : print ( ctx . result . data [ \"response\" ][ \"text\" ]) else : print ( ctx . result . exception ) await client . close () asyncio . run ( main ())","title":"Using"},{"location":"en/client/using/#using","text":"This part of library shouldn't be used directly, but will be useful if you want to write VKWave's extensions.","title":"Using"},{"location":"en/client/using/#how-to","text":"from vkwave.client.default import AIOHTTPClient from vkwave.client.context import ResultState import asyncio async def main (): base_params = { \"access_token\" : \"xxxxxx\" , \"v\" : \"5.103\" } client = AIOHTTPClient () ctx = client . create_request ( \"status.get\" , ** base_params ) await ctx . send_request () if ctx . result . state is ResultState . SUCCESS : print ( ctx . result . data [ \"response\" ][ \"text\" ]) else : print ( ctx . result . exception ) await client . close () asyncio . run ( main ())","title":"How to"},{"location":"en/getting_started/clones/","text":"Clones bots \u00b6 If you need to have several clones of one bot in different groups, you can use ClonesBot from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( \"Token1\" , 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token2\" , 11111111 ), SimpleLongPollBot ( \"Token3\" , 22222222 ), ) clones . run_all_bots ()","title":"Clones bots"},{"location":"en/getting_started/clones/#clones-bots","text":"If you need to have several clones of one bot in different groups, you can use ClonesBot from vkwave.bots import SimpleLongPollBot , ClonesBot bot = SimpleLongPollBot ( \"Token1\" , 123456789 ) @bot . message_handler ( bot . text_filter ( \"hello\" )) def handle ( _ ) -> str : return \"Hello world!\" clones = ClonesBot ( bot , SimpleLongPollBot ( \"Token2\" , 11111111 ), SimpleLongPollBot ( \"Token3\" , 22222222 ), ) clones . run_all_bots ()","title":"Clones bots"},{"location":"en/getting_started/echo/","text":"Echo-bot \u00b6 Simpliest example to start working with VKWave is bot, which to any message answers the same message. # Needed imports from vkwave.bots import SimpleLongPollBot , SimpleBotEvent # Creating instance of the bot bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) # Registering handler, which will catch all incoming messages... @bot . message_handler () def echo ( event : SimpleBotEvent ) -> str : return event . object . object . message . text # ...and answering to it with text of new message bot . run_forever () # Run the bot","title":"Echo-bot"},{"location":"en/getting_started/echo/#echo-bot","text":"Simpliest example to start working with VKWave is bot, which to any message answers the same message. # Needed imports from vkwave.bots import SimpleLongPollBot , SimpleBotEvent # Creating instance of the bot bot = SimpleLongPollBot ( tokens = \"MyToken\" , group_id = 123456789 ) # Registering handler, which will catch all incoming messages... @bot . message_handler () def echo ( event : SimpleBotEvent ) -> str : return event . object . object . message . text # ...and answering to it with text of new message bot . run_forever () # Run the bot","title":"Echo-bot"},{"location":"en/getting_started/events/","text":"Events \u00b6 Every event inherited from SimpleBotEvent ::: vkwave.bots.addons.easy.SimpleBotEvent \u00b6 rendering: show_root_heading: true show_source: false selection: inherited_members: true filters: - \"!^_\"","title":"Events"},{"location":"en/getting_started/events/#events","text":"Every event inherited from SimpleBotEvent","title":"Events"},{"location":"en/getting_started/events/#vkwavebotsaddonseasysimplebotevent","text":"rendering: show_root_heading: true show_source: false selection: inherited_members: true filters: - \"!^_\"","title":"::: vkwave.bots.addons.easy.SimpleBotEvent"},{"location":"en/getting_started/","text":"Introduction \u00b6 Here's collected examples to help understand how to work with library \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u00b6 Echo-bot Events Filters Multitokens Clones bots Keyboards Templates Attachments' uploaders","title":"Introduction"},{"location":"en/getting_started/#introduction","text":"Here's collected examples to help understand how to work with library","title":"Introduction"},{"location":"en/getting_started/#_1","text":"Echo-bot Events Filters Multitokens Clones bots Keyboards Templates Attachments' uploaders","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435"},{"location":"en/getting_started/keyboards/","text":"Keyboards \u00b6 For convinient generating of keyboards use the Keyboard from vkwave.bots.utils.keyboards Buttons types \u00b6 VkWave supports all the button types, available in VK. More details in the documentation Type Method to create Text add_text_button() Link add_link_button() Location add_location_button() Vk Pay add_vkpay_button() Vk App add_vkapps_button() Callback add_callback_button() Setting up layout of keyboard \u00b6 VK keyboard is a grid. Max size of it's 5 \u00d7 10 buttons in normal mode, and (keyboard inside of message) \u2013 5 \u00d7 6 buttons in inline mode. Keyboard accept this parametrs to describe how keyboard will looks like and behave. Parameter Description one_time Keyboard will hide after button touched inline Show keyboard in inline mode To create new row in the keyboard call keyboard . add_row () Payload \u00b6 VK's keyboards supports sending hidden inforamtion by touching any button. It's predefined JSON, by which you can i.e filter events, or send some information to next steps of bot. from vkwave.bots.utils.keyboards.keyboard import Keyboard keyboard = Keyboard () kb . add_text_button ( \"Blue button\" , payload = { \"button\" : \"test\" }) VkWave will automatcally convert dict to JSON Configuring color of buttons \u00b6 You can recolor Text \u0438 Callback buttons. Use enumeration ButtonColor from vkwave.bots.utils.keyboards.keyboard kb . add_text_button ( \"Blue button\" , color = ButtonColor . PRIMARY ) kb . add_text_button ( \"White button\" , color = ButtonColor . SECONDARY ) kb . add_text_button ( \"Red button\" , color = ButtonColor . NEGATIVE ) kb . add_text_button ( \"Red button\" , color = ButtonColor . POSITIVE ) By default all button are blue ( ButtonColor.PRIMARY ) Sending keyboard \u00b6 Call any function sending messages and pass to it JSON with keyboard to parameter keyboard. It generates by method keyboard.get_keyboard() await event . answer ( \"Message with keyboard\" , keyboard = keyboard . get_keyboard ())","title":"Keyboards"},{"location":"en/getting_started/keyboards/#keyboards","text":"For convinient generating of keyboards use the Keyboard from vkwave.bots.utils.keyboards","title":"Keyboards"},{"location":"en/getting_started/keyboards/#buttons-types","text":"VkWave supports all the button types, available in VK. More details in the documentation Type Method to create Text add_text_button() Link add_link_button() Location add_location_button() Vk Pay add_vkpay_button() Vk App add_vkapps_button() Callback add_callback_button()","title":"Buttons types"},{"location":"en/getting_started/keyboards/#setting-up-layout-of-keyboard","text":"VK keyboard is a grid. Max size of it's 5 \u00d7 10 buttons in normal mode, and (keyboard inside of message) \u2013 5 \u00d7 6 buttons in inline mode. Keyboard accept this parametrs to describe how keyboard will looks like and behave. Parameter Description one_time Keyboard will hide after button touched inline Show keyboard in inline mode To create new row in the keyboard call keyboard . add_row ()","title":"Setting up layout of keyboard"},{"location":"en/getting_started/keyboards/#payload","text":"VK's keyboards supports sending hidden inforamtion by touching any button. It's predefined JSON, by which you can i.e filter events, or send some information to next steps of bot. from vkwave.bots.utils.keyboards.keyboard import Keyboard keyboard = Keyboard () kb . add_text_button ( \"Blue button\" , payload = { \"button\" : \"test\" }) VkWave will automatcally convert dict to JSON","title":"Payload"},{"location":"en/getting_started/keyboards/#configuring-color-of-buttons","text":"You can recolor Text \u0438 Callback buttons. Use enumeration ButtonColor from vkwave.bots.utils.keyboards.keyboard kb . add_text_button ( \"Blue button\" , color = ButtonColor . PRIMARY ) kb . add_text_button ( \"White button\" , color = ButtonColor . SECONDARY ) kb . add_text_button ( \"Red button\" , color = ButtonColor . NEGATIVE ) kb . add_text_button ( \"Red button\" , color = ButtonColor . POSITIVE ) By default all button are blue ( ButtonColor.PRIMARY )","title":"Configuring color of buttons"},{"location":"en/getting_started/keyboards/#sending-keyboard","text":"Call any function sending messages and pass to it JSON with keyboard to parameter keyboard. It generates by method keyboard.get_keyboard() await event . answer ( \"Message with keyboard\" , keyboard = keyboard . get_keyboard ())","title":"Sending keyboard"},{"location":"en/getting_started/middleware/","text":"Middleware \u00b6 Middleware is an event handler, which runs before passing event to handlers. It allows skip handling of event by some condition without need to write same filter in each handler. Creating middleware \u00b6 Any midleware must return MiddlewareResult with value True or False . If middleware returns MiddlewareResult(False) , handling event stops and doesn't pass an event to handlers. Object-oriented way \u00b6 You can pass additional arguments You can define pre_process_event (required), which will run before event handling and post_process_event , which will run after from vkwave import SimpleLongPollBot , MiddlewareResult , BaseMiddleware class UserShouldNotLoveDogs ( BaseMiddleware ): async def pre_process_event ( self , event : BotEvent ) -> MiddlewareResult : if event . object . object . message . text == \"dog\" : print ( f \" { event . object . object . message . from_id } loves dogs\" ) return MiddlewareResult ( False ) return MiddlewareResult ( True ) Functional way \u00b6 You can't pass additional arguments to middleware You can't define post_process_event from vkwave import SimpleLongPollBot , MiddlewareResult @bot . middleware () async def check ( event : BotEvent ) -> MiddlewareResult : if event . object . object . message . text == \"dog\" : print ( f \" { event . object . object . message . from_id } loves dogs\" ) return MiddlewareResult ( False ) return MiddlewareResult ( True )","title":"Middleware"},{"location":"en/getting_started/middleware/#middleware","text":"Middleware is an event handler, which runs before passing event to handlers. It allows skip handling of event by some condition without need to write same filter in each handler.","title":"Middleware"},{"location":"en/getting_started/middleware/#creating-middleware","text":"Any midleware must return MiddlewareResult with value True or False . If middleware returns MiddlewareResult(False) , handling event stops and doesn't pass an event to handlers.","title":"Creating middleware"},{"location":"en/getting_started/middleware/#object-oriented-way","text":"You can pass additional arguments You can define pre_process_event (required), which will run before event handling and post_process_event , which will run after from vkwave import SimpleLongPollBot , MiddlewareResult , BaseMiddleware class UserShouldNotLoveDogs ( BaseMiddleware ): async def pre_process_event ( self , event : BotEvent ) -> MiddlewareResult : if event . object . object . message . text == \"dog\" : print ( f \" { event . object . object . message . from_id } loves dogs\" ) return MiddlewareResult ( False ) return MiddlewareResult ( True )","title":"Object-oriented way"},{"location":"en/getting_started/middleware/#functional-way","text":"You can't pass additional arguments to middleware You can't define post_process_event from vkwave import SimpleLongPollBot , MiddlewareResult @bot . middleware () async def check ( event : BotEvent ) -> MiddlewareResult : if event . object . object . message . text == \"dog\" : print ( f \" { event . object . object . message . from_id } loves dogs\" ) return MiddlewareResult ( False ) return MiddlewareResult ( True )","title":"Functional way"},{"location":"en/getting_started/multitoken/","text":"Multitoken \u00b6 To bypass the restrictions on the frequency of requests to the VK API when using a bot, you can specify several tokens: bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 )","title":"Multitoken"},{"location":"en/getting_started/multitoken/#multitoken","text":"To bypass the restrictions on the frequency of requests to the VK API when using a bot, you can specify several tokens: bot = SimpleLongPollBot ( tokens = [ \"MyToken1\" , \"MyToken2\" , \"MyToken3\" ], group_id = 123456789 )","title":"Multitoken"},{"location":"en/getting_started/routers/","text":"Routers \u00b6 Routers is must important part of any bot in VkWave. Routers contains handlers, thanks to which the event processing is carried out from vkwave.bots import DefaultRouter router = DefaultRouter () You can pass filters when creating a router (add a default filters), thanks to which events will process faster. router = DefaultRouter ( SomeFilter ()) @bots . simple_bot_message_handler ( router , < filters > ) async def handler ( ans : bots . SimpleBotEvent ): await ans . answer ( \"answer\" , )","title":"Routers"},{"location":"en/getting_started/routers/#routers","text":"Routers is must important part of any bot in VkWave. Routers contains handlers, thanks to which the event processing is carried out from vkwave.bots import DefaultRouter router = DefaultRouter () You can pass filters when creating a router (add a default filters), thanks to which events will process faster. router = DefaultRouter ( SomeFilter ()) @bots . simple_bot_message_handler ( router , < filters > ) async def handler ( ans : bots . SimpleBotEvent ): await ans . answer ( \"answer\" , )","title":"Routers"},{"location":"en/getting_started/templates/","text":"Templates \u00b6 Carousel \u00b6 Creating \u00b6 You can create \"Carousel\" by Template from vkwave.bots.utils.keyboards : from vkwave.bots.utils.keyboards import Template template_1 = Template ( title = \"First title\" , description = \"First description\" , photo_id = \"-191459391_457239025\" , ) template_1 . add_text_button ( \"Hello world!\" ) template_1 . add_text_button ( \"123\" ) template_2 = Template ( title = \"Second title\" , description = \"Second description\" , photo_id = \"-191459391_457239026\" , ) template_2 . add_text_button ( \"World hello!\" ) template_2 . add_text_button ( \"Wow, another button\" ) carousel = Template . generate_carousel ( template_1 , template_2 ) Sending \u00b6 Via separate api object \u00b6 api_session = API ( ... ) api = api_session . get_context () await api . messages . send ( user_id = 1 , random_id = 0 , template = carousel ) Via bundled with event API \u00b6 await event . api_ctx . messages . send ( user_id = 1 , random_id = 0 , template = carousel ) Via answer (SimpleBot) \u00b6 await event . answer ( template = carousel )","title":"Templates"},{"location":"en/getting_started/templates/#templates","text":"","title":"Templates"},{"location":"en/getting_started/templates/#carousel","text":"","title":"Carousel"},{"location":"en/getting_started/templates/#creating","text":"You can create \"Carousel\" by Template from vkwave.bots.utils.keyboards : from vkwave.bots.utils.keyboards import Template template_1 = Template ( title = \"First title\" , description = \"First description\" , photo_id = \"-191459391_457239025\" , ) template_1 . add_text_button ( \"Hello world!\" ) template_1 . add_text_button ( \"123\" ) template_2 = Template ( title = \"Second title\" , description = \"Second description\" , photo_id = \"-191459391_457239026\" , ) template_2 . add_text_button ( \"World hello!\" ) template_2 . add_text_button ( \"Wow, another button\" ) carousel = Template . generate_carousel ( template_1 , template_2 )","title":"Creating"},{"location":"en/getting_started/templates/#sending","text":"","title":"Sending"},{"location":"en/getting_started/templates/#via-separate-api-object","text":"api_session = API ( ... ) api = api_session . get_context () await api . messages . send ( user_id = 1 , random_id = 0 , template = carousel )","title":"Via separate api object"},{"location":"en/getting_started/templates/#via-bundled-with-event-api","text":"await event . api_ctx . messages . send ( user_id = 1 , random_id = 0 , template = carousel )","title":"Via bundled with event API"},{"location":"en/getting_started/templates/#via-answer-simplebot","text":"await event . answer ( template = carousel )","title":"Via answer (SimpleBot)"},{"location":"en/getting_started/uploaders/","text":"Attachments' uploaders \u00b6 Each uploader implements BaseUploader : Method Description get_attachment_from_io Uploads attachment from bytes get_attachment_from_path Uploads attachment from disk get_attachments_from_paths Uploads several attachments from disk get_attachment_from_link Uploads attachment from link get_attachments_from_links Uploads several attachments from links To message \u00b6 Images \u00b6 from vkwave.api import API from vkwave.bots.utils.uploaders import PhotoUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) uploader = PhotoUploader ( api . get_context ()) async def main (): big_attachment = await uploader . get_attachments_from_paths ( peer_id = 578716413 , file_paths = [ \"photo1.jpg\" , \"photo2.jpg\" , \"photo3.jpg\" ], ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = big_attachment , random_id = 0 ) Voice message \u00b6 from vkwave.api import API from vkwave.bots.utils.uploaders import VoiceUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) uploader = VoiceUploader ( api . get_context ()) audio_message = await uploader . get_attachment_from_path ( peer_id = 578716413 , file_path = \"audio.ogg\" , ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = audio_message , random_id = 0 ) Documents \u00b6 from vkwave.api import API from vkwave.bots.utils.uploaders import DocUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) doc = await DocUploader ( api . get_context ()) . get_attachment_from_link ( peer_id = 123 , link = \"https://user-images.githubusercontent.com/28061158/74590410-239e3300-501f-11ea-9774-27ee507a1e1e.jpg\" , title = \"my document title\" ) await api . get_context () . messages . send ( user_id = 1234 , attachment = doc , random_id = 0 ) To wall \u00b6 Works only with user's token Images \u00b6 from vkwave.api import API from vkwave.bots.utils.uploaders import WallPhotoUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) photo = await WallPhotoUploader ( api . get_context ()) . get_attachment_from_link ( group_id =- 191949777 , link = \"https://user-images.githubusercontent.com/28061158/74590410-239e3300-501f-11ea-9774-27ee507a1e1e.jpg\" , ) await api . get_context () . wall . post ( owner_id =- 191949777 , attachments = photo )","title":"Attachments' uploaders"},{"location":"en/getting_started/uploaders/#attachments-uploaders","text":"Each uploader implements BaseUploader : Method Description get_attachment_from_io Uploads attachment from bytes get_attachment_from_path Uploads attachment from disk get_attachments_from_paths Uploads several attachments from disk get_attachment_from_link Uploads attachment from link get_attachments_from_links Uploads several attachments from links","title":"Attachments' uploaders"},{"location":"en/getting_started/uploaders/#to-message","text":"","title":"To message"},{"location":"en/getting_started/uploaders/#images","text":"from vkwave.api import API from vkwave.bots.utils.uploaders import PhotoUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) uploader = PhotoUploader ( api . get_context ()) async def main (): big_attachment = await uploader . get_attachments_from_paths ( peer_id = 578716413 , file_paths = [ \"photo1.jpg\" , \"photo2.jpg\" , \"photo3.jpg\" ], ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = big_attachment , random_id = 0 )","title":"Images"},{"location":"en/getting_started/uploaders/#voice-message","text":"from vkwave.api import API from vkwave.bots.utils.uploaders import VoiceUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) uploader = VoiceUploader ( api . get_context ()) audio_message = await uploader . get_attachment_from_path ( peer_id = 578716413 , file_path = \"audio.ogg\" , ) await api . get_context () . messages . send ( user_id = 578716413 , attachment = audio_message , random_id = 0 )","title":"Voice message"},{"location":"en/getting_started/uploaders/#documents","text":"from vkwave.api import API from vkwave.bots.utils.uploaders import DocUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) doc = await DocUploader ( api . get_context ()) . get_attachment_from_link ( peer_id = 123 , link = \"https://user-images.githubusercontent.com/28061158/74590410-239e3300-501f-11ea-9774-27ee507a1e1e.jpg\" , title = \"my document title\" ) await api . get_context () . messages . send ( user_id = 1234 , attachment = doc , random_id = 0 )","title":"Documents"},{"location":"en/getting_started/uploaders/#to-wall","text":"Works only with user's token","title":"To wall"},{"location":"en/getting_started/uploaders/#images_1","text":"from vkwave.api import API from vkwave.bots.utils.uploaders import WallPhotoUploader from vkwave.client import AIOHTTPClient api = API ( clients = AIOHTTPClient (), tokens = \"token\" ) photo = await WallPhotoUploader ( api . get_context ()) . get_attachment_from_link ( group_id =- 191949777 , link = \"https://user-images.githubusercontent.com/28061158/74590410-239e3300-501f-11ea-9774-27ee507a1e1e.jpg\" , ) await api . get_context () . wall . post ( owner_id =- 191949777 , attachments = photo )","title":"Images"},{"location":"en/getting_started/filters/builtin/","text":"Built-in filter \u00b6 By default VkWave has several filters, which can be imported from from vkwave.bots.core.dispatching import filters : EventTypeFilter \u00b6 Filters by type of event (New message, user allowed to send messages, etc. Full list of events in Vk's documentaton ) # Handles all allows to send message... @bot . handler ( filters . EventTypeFilter ( \"message_allow\" )) def only_allows ( event : SimpleBotEvent ): event . ans ( \"Hello!\" ) # ...and replies to them TextFilter \u00b6 Filters by text of new message # Catches all messages with hi @bot . message_handler ( filters . TextFilter ( \"hi\" )) def only_hi_in_text ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to them You can pass a list of strings, then handler will work if any list's item is in message # Catches all messages with hi or hello @bot . message_handler ( filters . TextFilter ([ \"hi\" , \"hello\" )) def only_greetings_in_text ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to them PayloadFilter \u00b6 Filters by payload of message More about keyboards ) # Catches all messages which have payload {\"button\": \"start\"} @bot . message_handler ( filters . PayloadFilter ({ \"button\" : \"start\" })) def only_start_button_pressed ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to them ChatActionFilter \u00b6 Filters by event in chat (i. e. new chat member. Full of action ) # Catches all invites of new chat members @bot . message_handler ( filters . ChatActionFilter ( \"chat_invite_user\" )) def only_new_user_invited ( event : SimpleBotEvent ): event . ans ( \"Welcome!\" ) # ...and answers to them CommandsFilter \u00b6 Filters by command in messages' text. By default commands are the messages, starts with ! or / , but you can configure it by passing an list or tuple to prefixes argument # Catches all messages with `/hello` or `!hello` @bot . message_handler ( filters . CommandsFilter ( \"hello\" )) def only_new_user_invited ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to them RegexFilter \u00b6 Filters by text message (with regex) # Catches all messages with word starts with `h`, and last `o` @bot . message_handler ( filters . RegexFilter ( r \"^h\\w*o$\" )) def only_matched_by_regex ( event : SimpleBotEvent ): event . ans ( \"Message matches regex!\" ) # ...and answers to them MessageFromConversationTypeFilter \u00b6 Filters by type of chat Available types of chats: Personal Conversation from_pm , from_dm , from_direct from_chat , chat # Catches all messages from personal dialogues @bot . message_handler ( filters . MessageFromConversationTypeFilter ( \"from_pm\" )) def only_private_messages ( event : SimpleBotEvent ): event . ans ( \"New message from personal chat!\" ) # ...and answers to them FromMeFilter \u00b6 Filters by sender of message (bot or his interlocutor). Works only for userbots. # Catches all message from bot @bot . message_handler ( filters . FromMeFilter ( True ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"New message from me!\" ) # ...and answers to them MessageArgsFilter \u00b6 Filters by amount of args in command Have two parameters: Parameter Description args_count Amount of arguments command_length Amount of words in command # Catches all messages with two args in command (i. e., \"/start arg1 arg2\") @bot . message_handler ( filters . MessageArgsFilter ( args_count = 2 )) def only_with_two_args ( event : SimpleBotEvent ): event . ans ( \"The message has two args: {0} !\" . format ( event [ 'args' ])) # ...and answers to them FwdMessagesFilter \u00b6 Filters message by existing or amount of forwarded messages If number didn't pass, reacts on any amount # Cathces all messages which has forwarded messages @bot . message_handler ( filters . FwdMessagesFilter () def with_forwarded_message ( event : SimpleBotEvent ): event . ans ( \"Message was forwarded\" ) # ...and answers to them ReplyMessageFilter \u00b6 Filters by having an reply to message # Catches all messages with replied message @bot . message_handler ( filters . ReplyMessageFilter ( True ) def with_replied_message ( event : SimpleBotEvent ): event . ans ( \"Has replied message\" ) # ...and answers to them TextStartswithFilter \u00b6 Filters by prefix of message # Catches all messages started with \"hell\" @bot . message_handler ( filters . TextStartsWithFilter ( \"hell\" ) def only_with_hell ( event : SimpleBotEvent ): event . ans ( \"Hi!\" ) # ...and answers to them PayloadContainsFilter \u00b6 Filters by having a key in payload (value not checked) # Catches all messages with \"button\" key @bot . message_handler ( filters . PayloadContainsFilter ( \"button\" ) def only_with_button_key ( event : SimpleBotEvent ): event . ans ( \"Button with payload button was pressed!\" ) # ...and answers to them","title":"Built-in filter"},{"location":"en/getting_started/filters/builtin/#built-in-filter","text":"By default VkWave has several filters, which can be imported from from vkwave.bots.core.dispatching import filters :","title":"Built-in filter"},{"location":"en/getting_started/filters/builtin/#eventtypefilter","text":"Filters by type of event (New message, user allowed to send messages, etc. Full list of events in Vk's documentaton ) # Handles all allows to send message... @bot . handler ( filters . EventTypeFilter ( \"message_allow\" )) def only_allows ( event : SimpleBotEvent ): event . ans ( \"Hello!\" ) # ...and replies to them","title":"EventTypeFilter"},{"location":"en/getting_started/filters/builtin/#textfilter","text":"Filters by text of new message # Catches all messages with hi @bot . message_handler ( filters . TextFilter ( \"hi\" )) def only_hi_in_text ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to them You can pass a list of strings, then handler will work if any list's item is in message # Catches all messages with hi or hello @bot . message_handler ( filters . TextFilter ([ \"hi\" , \"hello\" )) def only_greetings_in_text ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to them","title":"TextFilter"},{"location":"en/getting_started/filters/builtin/#payloadfilter","text":"Filters by payload of message More about keyboards ) # Catches all messages which have payload {\"button\": \"start\"} @bot . message_handler ( filters . PayloadFilter ({ \"button\" : \"start\" })) def only_start_button_pressed ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to them","title":"PayloadFilter"},{"location":"en/getting_started/filters/builtin/#chatactionfilter","text":"Filters by event in chat (i. e. new chat member. Full of action ) # Catches all invites of new chat members @bot . message_handler ( filters . ChatActionFilter ( \"chat_invite_user\" )) def only_new_user_invited ( event : SimpleBotEvent ): event . ans ( \"Welcome!\" ) # ...and answers to them","title":"ChatActionFilter"},{"location":"en/getting_started/filters/builtin/#commandsfilter","text":"Filters by command in messages' text. By default commands are the messages, starts with ! or / , but you can configure it by passing an list or tuple to prefixes argument # Catches all messages with `/hello` or `!hello` @bot . message_handler ( filters . CommandsFilter ( \"hello\" )) def only_new_user_invited ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to them","title":"CommandsFilter"},{"location":"en/getting_started/filters/builtin/#regexfilter","text":"Filters by text message (with regex) # Catches all messages with word starts with `h`, and last `o` @bot . message_handler ( filters . RegexFilter ( r \"^h\\w*o$\" )) def only_matched_by_regex ( event : SimpleBotEvent ): event . ans ( \"Message matches regex!\" ) # ...and answers to them","title":"RegexFilter"},{"location":"en/getting_started/filters/builtin/#messagefromconversationtypefilter","text":"Filters by type of chat Available types of chats: Personal Conversation from_pm , from_dm , from_direct from_chat , chat # Catches all messages from personal dialogues @bot . message_handler ( filters . MessageFromConversationTypeFilter ( \"from_pm\" )) def only_private_messages ( event : SimpleBotEvent ): event . ans ( \"New message from personal chat!\" ) # ...and answers to them","title":"MessageFromConversationTypeFilter"},{"location":"en/getting_started/filters/builtin/#frommefilter","text":"Filters by sender of message (bot or his interlocutor). Works only for userbots. # Catches all message from bot @bot . message_handler ( filters . FromMeFilter ( True ) def only_by_me ( event : SimpleBotEvent ): event . ans ( \"New message from me!\" ) # ...and answers to them","title":"FromMeFilter"},{"location":"en/getting_started/filters/builtin/#messageargsfilter","text":"Filters by amount of args in command Have two parameters: Parameter Description args_count Amount of arguments command_length Amount of words in command # Catches all messages with two args in command (i. e., \"/start arg1 arg2\") @bot . message_handler ( filters . MessageArgsFilter ( args_count = 2 )) def only_with_two_args ( event : SimpleBotEvent ): event . ans ( \"The message has two args: {0} !\" . format ( event [ 'args' ])) # ...and answers to them","title":"MessageArgsFilter"},{"location":"en/getting_started/filters/builtin/#fwdmessagesfilter","text":"Filters message by existing or amount of forwarded messages If number didn't pass, reacts on any amount # Cathces all messages which has forwarded messages @bot . message_handler ( filters . FwdMessagesFilter () def with_forwarded_message ( event : SimpleBotEvent ): event . ans ( \"Message was forwarded\" ) # ...and answers to them","title":"FwdMessagesFilter"},{"location":"en/getting_started/filters/builtin/#replymessagefilter","text":"Filters by having an reply to message # Catches all messages with replied message @bot . message_handler ( filters . ReplyMessageFilter ( True ) def with_replied_message ( event : SimpleBotEvent ): event . ans ( \"Has replied message\" ) # ...and answers to them","title":"ReplyMessageFilter"},{"location":"en/getting_started/filters/builtin/#textstartswithfilter","text":"Filters by prefix of message # Catches all messages started with \"hell\" @bot . message_handler ( filters . TextStartsWithFilter ( \"hell\" ) def only_with_hell ( event : SimpleBotEvent ): event . ans ( \"Hi!\" ) # ...and answers to them","title":"TextStartswithFilter"},{"location":"en/getting_started/filters/builtin/#payloadcontainsfilter","text":"Filters by having a key in payload (value not checked) # Catches all messages with \"button\" key @bot . message_handler ( filters . PayloadContainsFilter ( \"button\" ) def only_with_button_key ( event : SimpleBotEvent ): event . ans ( \"Button with payload button was pressed!\" ) # ...and answers to them","title":"PayloadContainsFilter"},{"location":"en/getting_started/filters/combining/","text":"Filters combining \u00b6 You can combine multiple filters in handlers, they will be combined by logical \"AND\" # Catches all messages from private chats with hi in text @bot . message_handler ( filters . TextFilter ( \"hi\" ), filters . MessageFromConversationTypeFilter ( \"from_pm\" ) ) def only_hi_in_text_from_pm ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to it Also you can use & , | or ~ between filters as \"AND\", \"OR\", \"NOT\": # Catches all messages without hi in text or from private chats @bot . message_handler ( ~ filters . TextFilter ( \"hi\" ) | filters . MessageFromConversationTypeFilter ( \"from_pm\" ) ) ) def not_hi_or_text_from_pm ( event : SimpleBotEvent ): event . ans ( \"Hello!\" ) # ...and answers to it","title":"Filters combining"},{"location":"en/getting_started/filters/combining/#filters-combining","text":"You can combine multiple filters in handlers, they will be combined by logical \"AND\" # Catches all messages from private chats with hi in text @bot . message_handler ( filters . TextFilter ( \"hi\" ), filters . MessageFromConversationTypeFilter ( \"from_pm\" ) ) def only_hi_in_text_from_pm ( event : SimpleBotEvent ): event . ans ( \"\u041f\u0440\u0438\u0432\u0435\u0442!\" ) # ...and answers to it Also you can use & , | or ~ between filters as \"AND\", \"OR\", \"NOT\": # Catches all messages without hi in text or from private chats @bot . message_handler ( ~ filters . TextFilter ( \"hi\" ) | filters . MessageFromConversationTypeFilter ( \"from_pm\" ) ) ) def not_hi_or_text_from_pm ( event : SimpleBotEvent ): event . ans ( \"Hello!\" ) # ...and answers to it","title":"Filters combining"},{"location":"en/getting_started/filters/custom/","text":"Custom filters \u00b6 You can write your own filters. There is two ways to create filters: Object-oriented BaseFilter \u00b6 Create new class, inherited from BaseFilter from vkwave.bots.core.dispatching.filters.base Filtration logic must be implemented in method check , which gets argument event - new event. from vkwave.bots.core.dispatching.filters import base , builtin class AttachmentsFilter ( base . BaseFilter ): \"\"\"Example filter. Checks if message has an attachments. \"\"\" async def check ( self , event : SimpleBotEvent ) -> base . FilterResult : \"\"\"Filtration logic. Must return FilterResult with True or False value, on which the success of the filter depends. \"\"\" builtin . is_message_event ( event ) return base . FilterResult ( event . object . object . message . attachments is not None ) Functional filter_caster \u00b6 You may cast to filter any function/lambda/coroutine using filter_caster from vkwave.bots.core.dispatching.filters import filter_caster has_attachments = filter_caster . cast ( lambda event : event . object . object . message . attachments is not None ) If pass function/lambda/coroutine directly to handler, then you shouldn't call filter.caster , it will be called automatically: @bot . message_handler ( lambda event : event . object . object . message . attachments is not None ) async def handler ( event ): await event . answer ( \"Attachments found\" )","title":"Custom filters"},{"location":"en/getting_started/filters/custom/#custom-filters","text":"You can write your own filters. There is two ways to create filters:","title":"Custom filters"},{"location":"en/getting_started/filters/custom/#object-oriented-basefilter","text":"Create new class, inherited from BaseFilter from vkwave.bots.core.dispatching.filters.base Filtration logic must be implemented in method check , which gets argument event - new event. from vkwave.bots.core.dispatching.filters import base , builtin class AttachmentsFilter ( base . BaseFilter ): \"\"\"Example filter. Checks if message has an attachments. \"\"\" async def check ( self , event : SimpleBotEvent ) -> base . FilterResult : \"\"\"Filtration logic. Must return FilterResult with True or False value, on which the success of the filter depends. \"\"\" builtin . is_message_event ( event ) return base . FilterResult ( event . object . object . message . attachments is not None )","title":"Object-oriented BaseFilter"},{"location":"en/getting_started/filters/custom/#functional-filter_caster","text":"You may cast to filter any function/lambda/coroutine using filter_caster from vkwave.bots.core.dispatching.filters import filter_caster has_attachments = filter_caster . cast ( lambda event : event . object . object . message . attachments is not None ) If pass function/lambda/coroutine directly to handler, then you shouldn't call filter.caster , it will be called automatically: @bot . message_handler ( lambda event : event . object . object . message . attachments is not None ) async def handler ( event ): await event . answer ( \"Attachments found\" )","title":"Functional filter_caster"},{"location":"en/getting_started/filters/","text":"Introduction \u00b6 Filter it's a way to filter events, which dont's fit by any condition (message text, sender's id, command - anything) Table of contents \u00b6 Built-in filters Filters combining Custom filters","title":"Introduction"},{"location":"en/getting_started/filters/#introduction","text":"Filter it's a way to filter events, which dont's fit by any condition (message text, sender's id, command - anything)","title":"Introduction"},{"location":"en/getting_started/filters/#table-of-contents","text":"Built-in filters Filters combining Custom filters","title":"Table of contents"},{"location":"en/http/","text":"TODO \u00b6","title":"TODO"},{"location":"en/http/#todo","text":"","title":"TODO"},{"location":"en/longpoll/","text":"TODO \u00b6","title":"TODO"},{"location":"en/longpoll/#todo","text":"","title":"TODO"},{"location":"en/types/","text":"\u041e\u0431\u0437\u043e\u0440 \u00b6 This part contains pydantic types, based on official vk-schema. Usage \u00b6 You can use this module to normalize data got from VK and get static typed object. import requests from vkwave.types.responses import StatusGetResponse def get_my_status ( token : str ) -> StatusGetResponse : resp = requests . get ( \"https://api.vk.com/method/status.get\" , params = { \"v\" : \"5.103\" , \"access_token\" : token }, ) return StatusGetResponse ( ** resp . json ()) status : StatusGetResponse = get_my_status ( token = \"123\" ) print ( status . response . text )","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"en/types/#_1","text":"This part contains pydantic types, based on official vk-schema.","title":"\u041e\u0431\u0437\u043e\u0440"},{"location":"en/types/#usage","text":"You can use this module to normalize data got from VK and get static typed object. import requests from vkwave.types.responses import StatusGetResponse def get_my_status ( token : str ) -> StatusGetResponse : resp = requests . get ( \"https://api.vk.com/method/status.get\" , params = { \"v\" : \"5.103\" , \"access_token\" : token }, ) return StatusGetResponse ( ** resp . json ()) status : StatusGetResponse = get_my_status ( token = \"123\" ) print ( status . response . text )","title":"Usage"}]}